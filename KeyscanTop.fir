;buildInfoPackage: chisel3, version: 3.2-20191106-SNAPSHOT, scalaVersion: 2.12.10, sbtVersion: 1.3.2
circuit KeyscanTop : 
  module Hssync : 
    output io : {global : {flip pclk : Clock, flip presetn : AsyncReset, flip sclk : Clock, flip sresetn : AsyncReset}, master : {flip key_curinfo : UInt<8>, flip key_vld : UInt<1>, key_ack : UInt<1>}, flip slave : {flip key_curinfo : UInt<8>, flip key_vld : UInt<1>, key_ack : UInt<1>}}
    
    wire req_mclk : UInt @[Hssync.scala 13:22]
    wire ack_sclk : UInt @[Hssync.scala 14:22]
    reg _T : UInt, io.global.sclk @[Hssync.scala 19:29]
    _T <= ack_sclk @[Hssync.scala 19:29]
    reg _T_1 : UInt, io.global.sclk @[Hssync.scala 20:30]
    _T_1 <= _T @[Hssync.scala 20:30]
    node _T_2 = eq(_T_1, UInt<1>("h00")) @[Hssync.scala 21:23]
    reg _T_3 : UInt<2>, io.global.sclk with : (reset => (io.global.sresetn, UInt<2>("h00"))) @[Hssync.scala 22:27]
    node _T_4 = eq(UInt<2>("h00"), _T_3) @[Conditional.scala 37:30]
    when _T_4 : @[Conditional.scala 40:58]
      _T_3 <= UInt<2>("h01") @[Hssync.scala 25:17]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_5 = eq(UInt<2>("h01"), _T_3) @[Conditional.scala 37:30]
      when _T_5 : @[Conditional.scala 39:67]
        node _T_6 = eq(io.master.key_vld, UInt<1>("h01")) @[Hssync.scala 28:32]
        when _T_6 : @[Hssync.scala 28:40]
          _T_3 <= UInt<2>("h02") @[Hssync.scala 29:19]
          skip @[Hssync.scala 28:40]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_7 = eq(UInt<2>("h02"), _T_3) @[Conditional.scala 37:30]
        when _T_7 : @[Conditional.scala 39:67]
          node _T_8 = eq(io.master.key_vld, UInt<1>("h00")) @[Hssync.scala 32:14]
          when _T_8 : @[Hssync.scala 32:33]
            _T_3 <= UInt<2>("h01") @[Hssync.scala 33:19]
            skip @[Hssync.scala 32:33]
          else : @[Hssync.scala 34:37]
            node _T_9 = eq(_T_1, UInt<1>("h01")) @[Hssync.scala 34:30]
            when _T_9 : @[Hssync.scala 34:37]
              _T_3 <= UInt<2>("h03") @[Hssync.scala 35:19]
              skip @[Hssync.scala 34:37]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_10 = eq(UInt<2>("h03"), _T_3) @[Conditional.scala 37:30]
          when _T_10 : @[Conditional.scala 39:67]
            when _T_2 : @[Hssync.scala 39:26]
              _T_3 <= UInt<2>("h01") @[Hssync.scala 40:19]
              skip @[Hssync.scala 39:26]
            skip @[Conditional.scala 39:67]
    node _T_11 = eq(_T_3, UInt<2>("h01")) @[Hssync.scala 44:26]
    node _T_12 = eq(io.master.key_vld, UInt<1>("h01")) @[Hssync.scala 44:63]
    node _T_13 = and(_T_11, _T_12) @[Hssync.scala 44:42]
    node _T_14 = eq(_T_3, UInt<2>("h02")) @[Hssync.scala 45:30]
    node _T_15 = eq(_T_1, UInt<1>("h00")) @[Hssync.scala 45:50]
    node _T_16 = and(_T_14, _T_15) @[Hssync.scala 45:46]
    node _T_17 = or(_T_13, _T_16) @[Hssync.scala 44:71]
    req_mclk <= _T_17 @[Hssync.scala 44:14]
    node _T_18 = eq(_T_3, UInt<2>("h02")) @[Hssync.scala 47:35]
    node _T_19 = eq(_T_1, UInt<1>("h01")) @[Hssync.scala 47:65]
    node _T_20 = and(_T_18, _T_19) @[Hssync.scala 47:51]
    io.master.key_ack <= _T_20 @[Hssync.scala 47:23]
    reg _T_21 : UInt<2>, io.global.pclk with : (reset => (io.global.presetn, UInt<2>("h00"))) @[Hssync.scala 53:27]
    reg _T_22 : UInt, io.global.pclk @[Hssync.scala 54:28]
    _T_22 <= req_mclk @[Hssync.scala 54:28]
    reg _T_23 : UInt, io.global.pclk @[Hssync.scala 55:30]
    _T_23 <= _T_22 @[Hssync.scala 55:30]
    node _T_24 = eq(UInt<2>("h00"), _T_21) @[Conditional.scala 37:30]
    when _T_24 : @[Conditional.scala 40:58]
      _T_21 <= UInt<2>("h01") @[Hssync.scala 58:17]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_25 = eq(UInt<2>("h01"), _T_21) @[Conditional.scala 37:30]
      when _T_25 : @[Conditional.scala 39:67]
        node _T_26 = eq(_T_23, UInt<1>("h01")) @[Hssync.scala 61:24]
        when _T_26 : @[Hssync.scala 61:31]
          _T_21 <= UInt<2>("h02") @[Hssync.scala 61:40]
          skip @[Hssync.scala 61:31]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_27 = eq(UInt<2>("h02"), _T_21) @[Conditional.scala 37:30]
        when _T_27 : @[Conditional.scala 39:67]
          node _T_28 = eq(io.slave.key_ack, UInt<1>("h01")) @[Hssync.scala 64:31]
          when _T_28 : @[Hssync.scala 64:40]
            _T_21 <= UInt<2>("h03") @[Hssync.scala 64:49]
            skip @[Hssync.scala 64:40]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_29 = eq(UInt<2>("h03"), _T_21) @[Conditional.scala 37:30]
          when _T_29 : @[Conditional.scala 39:67]
            node _T_30 = eq(_T_23, UInt<1>("h00")) @[Hssync.scala 67:14]
            when _T_30 : @[Hssync.scala 67:27]
              _T_21 <= UInt<2>("h01") @[Hssync.scala 67:36]
              skip @[Hssync.scala 67:27]
            skip @[Conditional.scala 39:67]
    node _T_31 = eq(_T_21, UInt<2>("h02")) @[Hssync.scala 70:34]
    node _T_32 = eq(_T_21, UInt<2>("h01")) @[Hssync.scala 70:63]
    node _T_33 = eq(_T_23, UInt<1>("h01")) @[Hssync.scala 70:93]
    node _T_34 = and(_T_32, _T_33) @[Hssync.scala 70:79]
    node _T_35 = or(_T_31, _T_34) @[Hssync.scala 70:50]
    io.slave.key_vld <= _T_35 @[Hssync.scala 70:22]
    node _T_36 = eq(_T_21, UInt<2>("h03")) @[Hssync.scala 71:26]
    node _T_37 = eq(_T_23, UInt<1>("h01")) @[Hssync.scala 71:58]
    node _T_38 = and(_T_36, _T_37) @[Hssync.scala 71:43]
    ack_sclk <= _T_38 @[Hssync.scala 71:14]
    io.slave.key_curinfo <= io.master.key_curinfo @[Hssync.scala 74:24]
    
  module Regfile : 
    input clock : Clock
    input reset : Reset
    output io : {apb : {flip psel : UInt<1>, flip pwrite : UInt<1>, flip penable : UInt<1>, flip paddr : UInt<6>, flip pwdata : UInt<32>, prdata : UInt<32>, irq : UInt<1>}, hs : {flip key_curinfo : UInt<8>, flip key_vld : UInt<1>, key_ack : UInt<1>}, ctl : {ksen : UInt<1>, wken : UInt<1>, key_preinfo : UInt<8>, ioen : UInt<26>, pol : UInt<1>, deb_value : UInt<4>, rintval_value : UInt<4>, sintval_value : UInt<4>, flip cyc_value : UInt<5>, flip ctl_int : UInt<1>}}
    
    reg key_vld_d : UInt, clock @[Regfile.scala 20:28]
    key_vld_d <= io.hs.key_vld @[Regfile.scala 20:28]
    reg key_vld_dd : UInt, clock @[Regfile.scala 21:29]
    key_vld_dd <= key_vld_d @[Regfile.scala 21:29]
    reg key_ack : UInt, clock with : (reset => (reset, UInt<1>("h00"))) @[Regfile.scala 22:26]
    node _T = eq(key_vld_dd, UInt<1>("h00")) @[Regfile.scala 23:33]
    node _T_1 = eq(key_vld_d, UInt<1>("h01")) @[Regfile.scala 23:55]
    node key_vld_r = and(_T, _T_1) @[Regfile.scala 23:42]
    when key_vld_r : @[Regfile.scala 24:21]
      key_ack <= UInt<1>("h01") @[Regfile.scala 25:15]
      skip @[Regfile.scala 24:21]
    else : @[Regfile.scala 26:17]
      key_ack <= UInt<1>("h00") @[Regfile.scala 27:15]
      skip @[Regfile.scala 26:17]
    io.hs.key_ack <= key_ack @[Regfile.scala 29:19]
    reg ctl_int_d : UInt, clock @[Regfile.scala 35:28]
    ctl_int_d <= io.ctl.ctl_int @[Regfile.scala 35:28]
    reg ctl_int_dd : UInt, clock @[Regfile.scala 36:29]
    ctl_int_dd <= ctl_int_d @[Regfile.scala 36:29]
    reg ctl_int_ddd : UInt, clock @[Regfile.scala 37:30]
    ctl_int_ddd <= ctl_int_dd @[Regfile.scala 37:30]
    reg ctl_int_r : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Regfile.scala 38:28]
    node _T_2 = eq(ctl_int_ddd, UInt<1>("h00")) @[Regfile.scala 39:18]
    node _T_3 = eq(ctl_int_dd, UInt<1>("h01")) @[Regfile.scala 39:46]
    node _T_4 = and(_T_2, _T_3) @[Regfile.scala 39:31]
    ctl_int_r <= _T_4 @[Regfile.scala 39:15]
    io.apb.irq <= ctl_int_r @[Regfile.scala 40:16]
    node _T_5 = and(io.apb.psel, io.apb.penable) @[Regfile.scala 54:30]
    node wr_en = and(_T_5, io.apb.pwrite) @[Regfile.scala 54:47]
    node _T_6 = eq(io.apb.penable, UInt<1>("h00")) @[Regfile.scala 55:32]
    node _T_7 = and(io.apb.psel, _T_6) @[Regfile.scala 55:29]
    node _T_8 = eq(io.apb.pwrite, UInt<1>("h00")) @[Regfile.scala 55:52]
    node rd_en = and(_T_7, _T_8) @[Regfile.scala 55:49]
    node _T_9 = eq(io.apb.paddr, UInt<1>("h00")) @[Regfile.scala 58:30]
    node ks_en_wr = and(_T_9, wr_en) @[Regfile.scala 58:39]
    reg ks_en : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Regfile.scala 59:25]
    reg wk_en : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Regfile.scala 60:25]
    node _T_10 = eq(ks_en_wr, UInt<1>("h01")) @[Regfile.scala 61:19]
    when _T_10 : @[Regfile.scala 61:28]
      node _T_11 = bits(io.apb.pwdata, 0, 0) @[Regfile.scala 62:29]
      ks_en <= _T_11 @[Regfile.scala 62:13]
      node _T_12 = bits(io.apb.pwdata, 1, 1) @[Regfile.scala 63:29]
      wk_en <= _T_12 @[Regfile.scala 63:13]
      skip @[Regfile.scala 61:28]
    else : @[Regfile.scala 64:44]
      node _T_13 = eq(ctl_int_r, UInt<1>("h01")) @[Regfile.scala 64:25]
      node _T_14 = eq(wk_en, UInt<1>("h00")) @[Regfile.scala 64:36]
      node _T_15 = and(_T_13, _T_14) @[Regfile.scala 64:32]
      when _T_15 : @[Regfile.scala 64:44]
        ks_en <= UInt<1>("h00") @[Regfile.scala 65:13]
        skip @[Regfile.scala 64:44]
    node _T_16 = cat(UInt<30>("h00"), wk_en) @[Cat.scala 29:58]
    node ks_en_bus = cat(_T_16, ks_en) @[Cat.scala 29:58]
    node _T_17 = eq(io.apb.paddr, UInt<1>("h01")) @[Regfile.scala 69:31]
    node io_cfg_wr = and(_T_17, wr_en) @[Regfile.scala 69:40]
    reg ksoe : UInt<18>, clock with : (reset => (reset, UInt<18>("h00"))) @[Regfile.scala 70:24]
    reg ksie : UInt<8>, clock with : (reset => (reset, UInt<8>("h00"))) @[Regfile.scala 71:24]
    node _T_18 = eq(io_cfg_wr, UInt<1>("h01")) @[Regfile.scala 72:20]
    when _T_18 : @[Regfile.scala 72:29]
      node _T_19 = bits(io.apb.pwdata, 25, 8) @[Regfile.scala 73:28]
      ksoe <= _T_19 @[Regfile.scala 73:12]
      node _T_20 = bits(io.apb.pwdata, 7, 0) @[Regfile.scala 74:28]
      ksie <= _T_20 @[Regfile.scala 74:12]
      skip @[Regfile.scala 72:29]
    node _T_21 = cat(UInt<6>("h00"), ksoe) @[Cat.scala 29:58]
    node io_cfg_bus = cat(_T_21, ksie) @[Cat.scala 29:58]
    node _T_22 = eq(io.apb.paddr, UInt<2>("h02")) @[Regfile.scala 78:32]
    node int_cfg_wr = and(_T_22, wr_en) @[Regfile.scala 78:41]
    reg int_en : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Regfile.scala 79:26]
    reg ksf : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Regfile.scala 80:23]
    reg ksif : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Regfile.scala 81:24]
    node _T_23 = eq(int_cfg_wr, UInt<1>("h01")) @[Regfile.scala 82:21]
    when _T_23 : @[Regfile.scala 82:30]
      node _T_24 = bits(io.apb.pwdata, 0, 0) @[Regfile.scala 83:30]
      int_en <= _T_24 @[Regfile.scala 83:14]
      skip @[Regfile.scala 82:30]
    node _T_25 = eq(int_cfg_wr, UInt<1>("h01")) @[Regfile.scala 85:21]
    node _T_26 = bits(io.apb.pwdata, 1, 1) @[Regfile.scala 85:45]
    node _T_27 = and(_T_25, _T_26) @[Regfile.scala 85:29]
    when _T_27 : @[Regfile.scala 85:50]
      node _T_28 = bits(io.apb.pwdata, 1, 1) @[Regfile.scala 86:28]
      node _T_29 = not(_T_28) @[Regfile.scala 86:14]
      ksf <= _T_29 @[Regfile.scala 86:11]
      skip @[Regfile.scala 85:50]
    else : @[Regfile.scala 87:35]
      node _T_30 = eq(ctl_int_r, UInt<1>("h01")) @[Regfile.scala 87:26]
      when _T_30 : @[Regfile.scala 87:35]
        ksf <= UInt<1>("h01") @[Regfile.scala 88:11]
        skip @[Regfile.scala 87:35]
    node _T_31 = eq(int_cfg_wr, UInt<1>("h01")) @[Regfile.scala 90:21]
    node _T_32 = bits(io.apb.pwdata, 2, 2) @[Regfile.scala 90:45]
    node _T_33 = and(_T_31, _T_32) @[Regfile.scala 90:29]
    when _T_33 : @[Regfile.scala 90:50]
      node _T_34 = bits(io.apb.pwdata, 2, 2) @[Regfile.scala 91:29]
      node _T_35 = not(_T_34) @[Regfile.scala 91:15]
      ksif <= _T_35 @[Regfile.scala 91:12]
      skip @[Regfile.scala 90:50]
    else : @[Regfile.scala 92:35]
      node _T_36 = eq(ctl_int_r, UInt<1>("h01")) @[Regfile.scala 92:26]
      when _T_36 : @[Regfile.scala 92:35]
        ksif <= int_en @[Regfile.scala 93:12]
        skip @[Regfile.scala 92:35]
    node _T_37 = cat(ksf, int_en) @[Cat.scala 29:58]
    node _T_38 = cat(UInt<29>("h00"), ksif) @[Cat.scala 29:58]
    node int_cfg_bus = cat(_T_38, _T_37) @[Cat.scala 29:58]
    node _T_39 = eq(io.apb.paddr, UInt<2>("h03")) @[Regfile.scala 97:30]
    node ks_cfg_wr = and(_T_39, wr_en) @[Regfile.scala 97:39]
    reg pol : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Regfile.scala 98:23]
    reg clr_key : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Regfile.scala 99:27]
    reg sintval_value : UInt<4>, clock with : (reset => (reset, UInt<4>("h08"))) @[Regfile.scala 100:33]
    reg rintval_value : UInt<4>, clock with : (reset => (reset, UInt<4>("h00"))) @[Regfile.scala 101:33]
    reg deb_value : UInt<4>, clock with : (reset => (reset, UInt<4>("h04"))) @[Regfile.scala 102:29]
    node _T_40 = eq(ks_cfg_wr, UInt<1>("h01")) @[Regfile.scala 103:20]
    when _T_40 : @[Regfile.scala 103:29]
      node _T_41 = bits(io.apb.pwdata, 13, 13) @[Regfile.scala 104:27]
      pol <= _T_41 @[Regfile.scala 104:11]
      node _T_42 = bits(io.apb.pwdata, 12, 12) @[Regfile.scala 105:31]
      clr_key <= _T_42 @[Regfile.scala 105:15]
      node _T_43 = bits(io.apb.pwdata, 11, 8) @[Regfile.scala 106:37]
      sintval_value <= _T_43 @[Regfile.scala 106:21]
      node _T_44 = bits(io.apb.pwdata, 7, 4) @[Regfile.scala 107:37]
      rintval_value <= _T_44 @[Regfile.scala 107:21]
      node _T_45 = bits(io.apb.pwdata, 3, 0) @[Regfile.scala 108:33]
      deb_value <= _T_45 @[Regfile.scala 108:17]
      skip @[Regfile.scala 103:29]
    else : @[Regfile.scala 109:16]
      clr_key <= UInt<1>("h00") @[Regfile.scala 110:15]
      skip @[Regfile.scala 109:16]
    node _T_46 = cat(sintval_value, rintval_value) @[Cat.scala 29:58]
    node _T_47 = cat(_T_46, deb_value) @[Cat.scala 29:58]
    node _T_48 = cat(UInt<18>("h00"), pol) @[Cat.scala 29:58]
    node _T_49 = cat(_T_48, clr_key) @[Cat.scala 29:58]
    node ks_cfg_bus = cat(_T_49, _T_47) @[Cat.scala 29:58]
    reg rows_0 : UInt<8>, clock with : (reset => (reset, UInt<8>("h00"))) @[Regfile.scala 116:23]
    node _T_50 = eq(clr_key, UInt<1>("h01")) @[Regfile.scala 117:20]
    when _T_50 : @[Regfile.scala 117:29]
      rows_0 <= UInt<1>("h00") @[Regfile.scala 118:17]
      skip @[Regfile.scala 117:29]
    else : @[Regfile.scala 119:69]
      node _T_51 = eq(io.ctl.cyc_value, UInt<1>("h00")) @[Regfile.scala 119:36]
      node _T_52 = eq(key_vld_r, UInt<1>("h01")) @[Regfile.scala 119:59]
      node _T_53 = and(_T_51, _T_52) @[Regfile.scala 119:45]
      when _T_53 : @[Regfile.scala 119:69]
        rows_0 <= io.hs.key_curinfo @[Regfile.scala 120:17]
        skip @[Regfile.scala 119:69]
      else : @[Regfile.scala 121:19]
        rows_0 <= rows_0 @[Regfile.scala 122:17]
        skip @[Regfile.scala 121:19]
    reg rows_1 : UInt<8>, clock with : (reset => (reset, UInt<8>("h00"))) @[Regfile.scala 116:23]
    node _T_54 = eq(clr_key, UInt<1>("h01")) @[Regfile.scala 117:20]
    when _T_54 : @[Regfile.scala 117:29]
      rows_1 <= UInt<1>("h00") @[Regfile.scala 118:17]
      skip @[Regfile.scala 117:29]
    else : @[Regfile.scala 119:69]
      node _T_55 = eq(io.ctl.cyc_value, UInt<1>("h01")) @[Regfile.scala 119:36]
      node _T_56 = eq(key_vld_r, UInt<1>("h01")) @[Regfile.scala 119:59]
      node _T_57 = and(_T_55, _T_56) @[Regfile.scala 119:45]
      when _T_57 : @[Regfile.scala 119:69]
        rows_1 <= io.hs.key_curinfo @[Regfile.scala 120:17]
        skip @[Regfile.scala 119:69]
      else : @[Regfile.scala 121:19]
        rows_1 <= rows_1 @[Regfile.scala 122:17]
        skip @[Regfile.scala 121:19]
    reg rows_2 : UInt<8>, clock with : (reset => (reset, UInt<8>("h00"))) @[Regfile.scala 116:23]
    node _T_58 = eq(clr_key, UInt<1>("h01")) @[Regfile.scala 117:20]
    when _T_58 : @[Regfile.scala 117:29]
      rows_2 <= UInt<1>("h00") @[Regfile.scala 118:17]
      skip @[Regfile.scala 117:29]
    else : @[Regfile.scala 119:69]
      node _T_59 = eq(io.ctl.cyc_value, UInt<2>("h02")) @[Regfile.scala 119:36]
      node _T_60 = eq(key_vld_r, UInt<1>("h01")) @[Regfile.scala 119:59]
      node _T_61 = and(_T_59, _T_60) @[Regfile.scala 119:45]
      when _T_61 : @[Regfile.scala 119:69]
        rows_2 <= io.hs.key_curinfo @[Regfile.scala 120:17]
        skip @[Regfile.scala 119:69]
      else : @[Regfile.scala 121:19]
        rows_2 <= rows_2 @[Regfile.scala 122:17]
        skip @[Regfile.scala 121:19]
    reg rows_3 : UInt<8>, clock with : (reset => (reset, UInt<8>("h00"))) @[Regfile.scala 116:23]
    node _T_62 = eq(clr_key, UInt<1>("h01")) @[Regfile.scala 117:20]
    when _T_62 : @[Regfile.scala 117:29]
      rows_3 <= UInt<1>("h00") @[Regfile.scala 118:17]
      skip @[Regfile.scala 117:29]
    else : @[Regfile.scala 119:69]
      node _T_63 = eq(io.ctl.cyc_value, UInt<2>("h03")) @[Regfile.scala 119:36]
      node _T_64 = eq(key_vld_r, UInt<1>("h01")) @[Regfile.scala 119:59]
      node _T_65 = and(_T_63, _T_64) @[Regfile.scala 119:45]
      when _T_65 : @[Regfile.scala 119:69]
        rows_3 <= io.hs.key_curinfo @[Regfile.scala 120:17]
        skip @[Regfile.scala 119:69]
      else : @[Regfile.scala 121:19]
        rows_3 <= rows_3 @[Regfile.scala 122:17]
        skip @[Regfile.scala 121:19]
    reg rows_4 : UInt<8>, clock with : (reset => (reset, UInt<8>("h00"))) @[Regfile.scala 116:23]
    node _T_66 = eq(clr_key, UInt<1>("h01")) @[Regfile.scala 117:20]
    when _T_66 : @[Regfile.scala 117:29]
      rows_4 <= UInt<1>("h00") @[Regfile.scala 118:17]
      skip @[Regfile.scala 117:29]
    else : @[Regfile.scala 119:69]
      node _T_67 = eq(io.ctl.cyc_value, UInt<3>("h04")) @[Regfile.scala 119:36]
      node _T_68 = eq(key_vld_r, UInt<1>("h01")) @[Regfile.scala 119:59]
      node _T_69 = and(_T_67, _T_68) @[Regfile.scala 119:45]
      when _T_69 : @[Regfile.scala 119:69]
        rows_4 <= io.hs.key_curinfo @[Regfile.scala 120:17]
        skip @[Regfile.scala 119:69]
      else : @[Regfile.scala 121:19]
        rows_4 <= rows_4 @[Regfile.scala 122:17]
        skip @[Regfile.scala 121:19]
    reg rows_5 : UInt<8>, clock with : (reset => (reset, UInt<8>("h00"))) @[Regfile.scala 116:23]
    node _T_70 = eq(clr_key, UInt<1>("h01")) @[Regfile.scala 117:20]
    when _T_70 : @[Regfile.scala 117:29]
      rows_5 <= UInt<1>("h00") @[Regfile.scala 118:17]
      skip @[Regfile.scala 117:29]
    else : @[Regfile.scala 119:69]
      node _T_71 = eq(io.ctl.cyc_value, UInt<3>("h05")) @[Regfile.scala 119:36]
      node _T_72 = eq(key_vld_r, UInt<1>("h01")) @[Regfile.scala 119:59]
      node _T_73 = and(_T_71, _T_72) @[Regfile.scala 119:45]
      when _T_73 : @[Regfile.scala 119:69]
        rows_5 <= io.hs.key_curinfo @[Regfile.scala 120:17]
        skip @[Regfile.scala 119:69]
      else : @[Regfile.scala 121:19]
        rows_5 <= rows_5 @[Regfile.scala 122:17]
        skip @[Regfile.scala 121:19]
    reg rows_6 : UInt<8>, clock with : (reset => (reset, UInt<8>("h00"))) @[Regfile.scala 116:23]
    node _T_74 = eq(clr_key, UInt<1>("h01")) @[Regfile.scala 117:20]
    when _T_74 : @[Regfile.scala 117:29]
      rows_6 <= UInt<1>("h00") @[Regfile.scala 118:17]
      skip @[Regfile.scala 117:29]
    else : @[Regfile.scala 119:69]
      node _T_75 = eq(io.ctl.cyc_value, UInt<3>("h06")) @[Regfile.scala 119:36]
      node _T_76 = eq(key_vld_r, UInt<1>("h01")) @[Regfile.scala 119:59]
      node _T_77 = and(_T_75, _T_76) @[Regfile.scala 119:45]
      when _T_77 : @[Regfile.scala 119:69]
        rows_6 <= io.hs.key_curinfo @[Regfile.scala 120:17]
        skip @[Regfile.scala 119:69]
      else : @[Regfile.scala 121:19]
        rows_6 <= rows_6 @[Regfile.scala 122:17]
        skip @[Regfile.scala 121:19]
    reg rows_7 : UInt<8>, clock with : (reset => (reset, UInt<8>("h00"))) @[Regfile.scala 116:23]
    node _T_78 = eq(clr_key, UInt<1>("h01")) @[Regfile.scala 117:20]
    when _T_78 : @[Regfile.scala 117:29]
      rows_7 <= UInt<1>("h00") @[Regfile.scala 118:17]
      skip @[Regfile.scala 117:29]
    else : @[Regfile.scala 119:69]
      node _T_79 = eq(io.ctl.cyc_value, UInt<3>("h07")) @[Regfile.scala 119:36]
      node _T_80 = eq(key_vld_r, UInt<1>("h01")) @[Regfile.scala 119:59]
      node _T_81 = and(_T_79, _T_80) @[Regfile.scala 119:45]
      when _T_81 : @[Regfile.scala 119:69]
        rows_7 <= io.hs.key_curinfo @[Regfile.scala 120:17]
        skip @[Regfile.scala 119:69]
      else : @[Regfile.scala 121:19]
        rows_7 <= rows_7 @[Regfile.scala 122:17]
        skip @[Regfile.scala 121:19]
    reg rows_8 : UInt<8>, clock with : (reset => (reset, UInt<8>("h00"))) @[Regfile.scala 116:23]
    node _T_82 = eq(clr_key, UInt<1>("h01")) @[Regfile.scala 117:20]
    when _T_82 : @[Regfile.scala 117:29]
      rows_8 <= UInt<1>("h00") @[Regfile.scala 118:17]
      skip @[Regfile.scala 117:29]
    else : @[Regfile.scala 119:69]
      node _T_83 = eq(io.ctl.cyc_value, UInt<4>("h08")) @[Regfile.scala 119:36]
      node _T_84 = eq(key_vld_r, UInt<1>("h01")) @[Regfile.scala 119:59]
      node _T_85 = and(_T_83, _T_84) @[Regfile.scala 119:45]
      when _T_85 : @[Regfile.scala 119:69]
        rows_8 <= io.hs.key_curinfo @[Regfile.scala 120:17]
        skip @[Regfile.scala 119:69]
      else : @[Regfile.scala 121:19]
        rows_8 <= rows_8 @[Regfile.scala 122:17]
        skip @[Regfile.scala 121:19]
    reg rows_9 : UInt<8>, clock with : (reset => (reset, UInt<8>("h00"))) @[Regfile.scala 116:23]
    node _T_86 = eq(clr_key, UInt<1>("h01")) @[Regfile.scala 117:20]
    when _T_86 : @[Regfile.scala 117:29]
      rows_9 <= UInt<1>("h00") @[Regfile.scala 118:17]
      skip @[Regfile.scala 117:29]
    else : @[Regfile.scala 119:69]
      node _T_87 = eq(io.ctl.cyc_value, UInt<4>("h09")) @[Regfile.scala 119:36]
      node _T_88 = eq(key_vld_r, UInt<1>("h01")) @[Regfile.scala 119:59]
      node _T_89 = and(_T_87, _T_88) @[Regfile.scala 119:45]
      when _T_89 : @[Regfile.scala 119:69]
        rows_9 <= io.hs.key_curinfo @[Regfile.scala 120:17]
        skip @[Regfile.scala 119:69]
      else : @[Regfile.scala 121:19]
        rows_9 <= rows_9 @[Regfile.scala 122:17]
        skip @[Regfile.scala 121:19]
    reg rows_10 : UInt<8>, clock with : (reset => (reset, UInt<8>("h00"))) @[Regfile.scala 116:23]
    node _T_90 = eq(clr_key, UInt<1>("h01")) @[Regfile.scala 117:20]
    when _T_90 : @[Regfile.scala 117:29]
      rows_10 <= UInt<1>("h00") @[Regfile.scala 118:17]
      skip @[Regfile.scala 117:29]
    else : @[Regfile.scala 119:69]
      node _T_91 = eq(io.ctl.cyc_value, UInt<4>("h0a")) @[Regfile.scala 119:36]
      node _T_92 = eq(key_vld_r, UInt<1>("h01")) @[Regfile.scala 119:59]
      node _T_93 = and(_T_91, _T_92) @[Regfile.scala 119:45]
      when _T_93 : @[Regfile.scala 119:69]
        rows_10 <= io.hs.key_curinfo @[Regfile.scala 120:17]
        skip @[Regfile.scala 119:69]
      else : @[Regfile.scala 121:19]
        rows_10 <= rows_10 @[Regfile.scala 122:17]
        skip @[Regfile.scala 121:19]
    reg rows_11 : UInt<8>, clock with : (reset => (reset, UInt<8>("h00"))) @[Regfile.scala 116:23]
    node _T_94 = eq(clr_key, UInt<1>("h01")) @[Regfile.scala 117:20]
    when _T_94 : @[Regfile.scala 117:29]
      rows_11 <= UInt<1>("h00") @[Regfile.scala 118:17]
      skip @[Regfile.scala 117:29]
    else : @[Regfile.scala 119:69]
      node _T_95 = eq(io.ctl.cyc_value, UInt<4>("h0b")) @[Regfile.scala 119:36]
      node _T_96 = eq(key_vld_r, UInt<1>("h01")) @[Regfile.scala 119:59]
      node _T_97 = and(_T_95, _T_96) @[Regfile.scala 119:45]
      when _T_97 : @[Regfile.scala 119:69]
        rows_11 <= io.hs.key_curinfo @[Regfile.scala 120:17]
        skip @[Regfile.scala 119:69]
      else : @[Regfile.scala 121:19]
        rows_11 <= rows_11 @[Regfile.scala 122:17]
        skip @[Regfile.scala 121:19]
    reg rows_12 : UInt<8>, clock with : (reset => (reset, UInt<8>("h00"))) @[Regfile.scala 116:23]
    node _T_98 = eq(clr_key, UInt<1>("h01")) @[Regfile.scala 117:20]
    when _T_98 : @[Regfile.scala 117:29]
      rows_12 <= UInt<1>("h00") @[Regfile.scala 118:17]
      skip @[Regfile.scala 117:29]
    else : @[Regfile.scala 119:69]
      node _T_99 = eq(io.ctl.cyc_value, UInt<4>("h0c")) @[Regfile.scala 119:36]
      node _T_100 = eq(key_vld_r, UInt<1>("h01")) @[Regfile.scala 119:59]
      node _T_101 = and(_T_99, _T_100) @[Regfile.scala 119:45]
      when _T_101 : @[Regfile.scala 119:69]
        rows_12 <= io.hs.key_curinfo @[Regfile.scala 120:17]
        skip @[Regfile.scala 119:69]
      else : @[Regfile.scala 121:19]
        rows_12 <= rows_12 @[Regfile.scala 122:17]
        skip @[Regfile.scala 121:19]
    reg rows_13 : UInt<8>, clock with : (reset => (reset, UInt<8>("h00"))) @[Regfile.scala 116:23]
    node _T_102 = eq(clr_key, UInt<1>("h01")) @[Regfile.scala 117:20]
    when _T_102 : @[Regfile.scala 117:29]
      rows_13 <= UInt<1>("h00") @[Regfile.scala 118:17]
      skip @[Regfile.scala 117:29]
    else : @[Regfile.scala 119:69]
      node _T_103 = eq(io.ctl.cyc_value, UInt<4>("h0d")) @[Regfile.scala 119:36]
      node _T_104 = eq(key_vld_r, UInt<1>("h01")) @[Regfile.scala 119:59]
      node _T_105 = and(_T_103, _T_104) @[Regfile.scala 119:45]
      when _T_105 : @[Regfile.scala 119:69]
        rows_13 <= io.hs.key_curinfo @[Regfile.scala 120:17]
        skip @[Regfile.scala 119:69]
      else : @[Regfile.scala 121:19]
        rows_13 <= rows_13 @[Regfile.scala 122:17]
        skip @[Regfile.scala 121:19]
    reg rows_14 : UInt<8>, clock with : (reset => (reset, UInt<8>("h00"))) @[Regfile.scala 116:23]
    node _T_106 = eq(clr_key, UInt<1>("h01")) @[Regfile.scala 117:20]
    when _T_106 : @[Regfile.scala 117:29]
      rows_14 <= UInt<1>("h00") @[Regfile.scala 118:17]
      skip @[Regfile.scala 117:29]
    else : @[Regfile.scala 119:69]
      node _T_107 = eq(io.ctl.cyc_value, UInt<4>("h0e")) @[Regfile.scala 119:36]
      node _T_108 = eq(key_vld_r, UInt<1>("h01")) @[Regfile.scala 119:59]
      node _T_109 = and(_T_107, _T_108) @[Regfile.scala 119:45]
      when _T_109 : @[Regfile.scala 119:69]
        rows_14 <= io.hs.key_curinfo @[Regfile.scala 120:17]
        skip @[Regfile.scala 119:69]
      else : @[Regfile.scala 121:19]
        rows_14 <= rows_14 @[Regfile.scala 122:17]
        skip @[Regfile.scala 121:19]
    reg rows_15 : UInt<8>, clock with : (reset => (reset, UInt<8>("h00"))) @[Regfile.scala 116:23]
    node _T_110 = eq(clr_key, UInt<1>("h01")) @[Regfile.scala 117:20]
    when _T_110 : @[Regfile.scala 117:29]
      rows_15 <= UInt<1>("h00") @[Regfile.scala 118:17]
      skip @[Regfile.scala 117:29]
    else : @[Regfile.scala 119:69]
      node _T_111 = eq(io.ctl.cyc_value, UInt<4>("h0f")) @[Regfile.scala 119:36]
      node _T_112 = eq(key_vld_r, UInt<1>("h01")) @[Regfile.scala 119:59]
      node _T_113 = and(_T_111, _T_112) @[Regfile.scala 119:45]
      when _T_113 : @[Regfile.scala 119:69]
        rows_15 <= io.hs.key_curinfo @[Regfile.scala 120:17]
        skip @[Regfile.scala 119:69]
      else : @[Regfile.scala 121:19]
        rows_15 <= rows_15 @[Regfile.scala 122:17]
        skip @[Regfile.scala 121:19]
    reg rows_16 : UInt<8>, clock with : (reset => (reset, UInt<8>("h00"))) @[Regfile.scala 116:23]
    node _T_114 = eq(clr_key, UInt<1>("h01")) @[Regfile.scala 117:20]
    when _T_114 : @[Regfile.scala 117:29]
      rows_16 <= UInt<1>("h00") @[Regfile.scala 118:17]
      skip @[Regfile.scala 117:29]
    else : @[Regfile.scala 119:69]
      node _T_115 = eq(io.ctl.cyc_value, UInt<5>("h010")) @[Regfile.scala 119:36]
      node _T_116 = eq(key_vld_r, UInt<1>("h01")) @[Regfile.scala 119:59]
      node _T_117 = and(_T_115, _T_116) @[Regfile.scala 119:45]
      when _T_117 : @[Regfile.scala 119:69]
        rows_16 <= io.hs.key_curinfo @[Regfile.scala 120:17]
        skip @[Regfile.scala 119:69]
      else : @[Regfile.scala 121:19]
        rows_16 <= rows_16 @[Regfile.scala 122:17]
        skip @[Regfile.scala 121:19]
    reg rows_17 : UInt<8>, clock with : (reset => (reset, UInt<8>("h00"))) @[Regfile.scala 116:23]
    node _T_118 = eq(clr_key, UInt<1>("h01")) @[Regfile.scala 117:20]
    when _T_118 : @[Regfile.scala 117:29]
      rows_17 <= UInt<1>("h00") @[Regfile.scala 118:17]
      skip @[Regfile.scala 117:29]
    else : @[Regfile.scala 119:69]
      node _T_119 = eq(io.ctl.cyc_value, UInt<5>("h011")) @[Regfile.scala 119:36]
      node _T_120 = eq(key_vld_r, UInt<1>("h01")) @[Regfile.scala 119:59]
      node _T_121 = and(_T_119, _T_120) @[Regfile.scala 119:45]
      when _T_121 : @[Regfile.scala 119:69]
        rows_17 <= io.hs.key_curinfo @[Regfile.scala 120:17]
        skip @[Regfile.scala 119:69]
      else : @[Regfile.scala 121:19]
        rows_17 <= rows_17 @[Regfile.scala 122:17]
        skip @[Regfile.scala 121:19]
    node _T_122 = cat(rows_1, rows_0) @[Cat.scala 29:58]
    node _T_123 = cat(rows_3, rows_2) @[Cat.scala 29:58]
    node ks_info0_bus = cat(_T_123, _T_122) @[Cat.scala 29:58]
    node _T_124 = cat(rows_5, rows_4) @[Cat.scala 29:58]
    node _T_125 = cat(rows_7, rows_6) @[Cat.scala 29:58]
    node ks_info1_bus = cat(_T_125, _T_124) @[Cat.scala 29:58]
    node _T_126 = cat(rows_9, rows_8) @[Cat.scala 29:58]
    node _T_127 = cat(rows_11, rows_10) @[Cat.scala 29:58]
    node ks_info2_bus = cat(_T_127, _T_126) @[Cat.scala 29:58]
    node _T_128 = cat(rows_13, rows_12) @[Cat.scala 29:58]
    node _T_129 = cat(rows_15, rows_14) @[Cat.scala 29:58]
    node ks_info3_bus = cat(_T_129, _T_128) @[Cat.scala 29:58]
    node _T_130 = cat(UInt<16>("h00"), rows_17) @[Cat.scala 29:58]
    node ks_info4_bus = cat(_T_130, rows_16) @[Cat.scala 29:58]
    node _T_131 = eq(io.apb.paddr, UInt<1>("h00")) @[Regfile.scala 131:52]
    node _T_132 = eq(io.apb.paddr, UInt<1>("h01")) @[Regfile.scala 132:16]
    node _T_133 = eq(io.apb.paddr, UInt<2>("h02")) @[Regfile.scala 133:16]
    node _T_134 = eq(io.apb.paddr, UInt<2>("h03")) @[Regfile.scala 134:16]
    node _T_135 = eq(io.apb.paddr, UInt<3>("h04")) @[Regfile.scala 135:16]
    node _T_136 = eq(io.apb.paddr, UInt<3>("h05")) @[Regfile.scala 136:16]
    node _T_137 = eq(io.apb.paddr, UInt<3>("h06")) @[Regfile.scala 137:16]
    node _T_138 = eq(io.apb.paddr, UInt<3>("h07")) @[Regfile.scala 138:16]
    node _T_139 = eq(io.apb.paddr, UInt<4>("h08")) @[Regfile.scala 139:16]
    node _T_140 = mux(_T_139, ks_info4_bus, UInt<32>("h00")) @[Mux.scala 87:16]
    node _T_141 = mux(_T_138, ks_info3_bus, _T_140) @[Mux.scala 87:16]
    node _T_142 = mux(_T_137, ks_info2_bus, _T_141) @[Mux.scala 87:16]
    node _T_143 = mux(_T_136, ks_info1_bus, _T_142) @[Mux.scala 87:16]
    node _T_144 = mux(_T_135, ks_info0_bus, _T_143) @[Mux.scala 87:16]
    node _T_145 = mux(_T_134, ks_cfg_bus, _T_144) @[Mux.scala 87:16]
    node _T_146 = mux(_T_133, int_cfg_bus, _T_145) @[Mux.scala 87:16]
    node _T_147 = mux(_T_132, io_cfg_bus, _T_146) @[Mux.scala 87:16]
    node prdata = mux(_T_131, ks_en_bus, _T_147) @[Mux.scala 87:16]
    reg prdata_d : UInt, clock with : (reset => (reset, UInt<1>("h00"))) @[Regfile.scala 140:27]
    node _T_148 = bits(rd_en, 0, 0) @[Regfile.scala 141:22]
    when _T_148 : @[Regfile.scala 141:26]
      prdata_d <= prdata @[Regfile.scala 142:16]
      skip @[Regfile.scala 141:26]
    io.apb.prdata <= prdata_d @[Regfile.scala 144:19]
    node sel_cyc_value_0 = eq(io.ctl.cyc_value, UInt<1>("h00")) @[Regfile.scala 146:67]
    node sel_cyc_value_1 = eq(io.ctl.cyc_value, UInt<1>("h01")) @[Regfile.scala 146:67]
    node sel_cyc_value_2 = eq(io.ctl.cyc_value, UInt<2>("h02")) @[Regfile.scala 146:67]
    node sel_cyc_value_3 = eq(io.ctl.cyc_value, UInt<2>("h03")) @[Regfile.scala 146:67]
    node sel_cyc_value_4 = eq(io.ctl.cyc_value, UInt<3>("h04")) @[Regfile.scala 146:67]
    node sel_cyc_value_5 = eq(io.ctl.cyc_value, UInt<3>("h05")) @[Regfile.scala 146:67]
    node sel_cyc_value_6 = eq(io.ctl.cyc_value, UInt<3>("h06")) @[Regfile.scala 146:67]
    node sel_cyc_value_7 = eq(io.ctl.cyc_value, UInt<3>("h07")) @[Regfile.scala 146:67]
    node sel_cyc_value_8 = eq(io.ctl.cyc_value, UInt<4>("h08")) @[Regfile.scala 146:67]
    node sel_cyc_value_9 = eq(io.ctl.cyc_value, UInt<4>("h09")) @[Regfile.scala 146:67]
    node sel_cyc_value_10 = eq(io.ctl.cyc_value, UInt<4>("h0a")) @[Regfile.scala 146:67]
    node sel_cyc_value_11 = eq(io.ctl.cyc_value, UInt<4>("h0b")) @[Regfile.scala 146:67]
    node sel_cyc_value_12 = eq(io.ctl.cyc_value, UInt<4>("h0c")) @[Regfile.scala 146:67]
    node sel_cyc_value_13 = eq(io.ctl.cyc_value, UInt<4>("h0d")) @[Regfile.scala 146:67]
    node sel_cyc_value_14 = eq(io.ctl.cyc_value, UInt<4>("h0e")) @[Regfile.scala 146:67]
    node sel_cyc_value_15 = eq(io.ctl.cyc_value, UInt<4>("h0f")) @[Regfile.scala 146:67]
    node sel_cyc_value_16 = eq(io.ctl.cyc_value, UInt<5>("h010")) @[Regfile.scala 146:67]
    node sel_cyc_value_17 = eq(io.ctl.cyc_value, UInt<5>("h011")) @[Regfile.scala 146:67]
    node _T_149 = bits(ksoe, 0, 0) @[Regfile.scala 147:53]
    node sel_rows_0 = mux(_T_149, rows_0, UInt<1>("h00")) @[Regfile.scala 147:48]
    node _T_150 = bits(ksoe, 1, 1) @[Regfile.scala 147:53]
    node sel_rows_1 = mux(_T_150, rows_1, UInt<1>("h00")) @[Regfile.scala 147:48]
    node _T_151 = bits(ksoe, 2, 2) @[Regfile.scala 147:53]
    node sel_rows_2 = mux(_T_151, rows_2, UInt<1>("h00")) @[Regfile.scala 147:48]
    node _T_152 = bits(ksoe, 3, 3) @[Regfile.scala 147:53]
    node sel_rows_3 = mux(_T_152, rows_3, UInt<1>("h00")) @[Regfile.scala 147:48]
    node _T_153 = bits(ksoe, 4, 4) @[Regfile.scala 147:53]
    node sel_rows_4 = mux(_T_153, rows_4, UInt<1>("h00")) @[Regfile.scala 147:48]
    node _T_154 = bits(ksoe, 5, 5) @[Regfile.scala 147:53]
    node sel_rows_5 = mux(_T_154, rows_5, UInt<1>("h00")) @[Regfile.scala 147:48]
    node _T_155 = bits(ksoe, 6, 6) @[Regfile.scala 147:53]
    node sel_rows_6 = mux(_T_155, rows_6, UInt<1>("h00")) @[Regfile.scala 147:48]
    node _T_156 = bits(ksoe, 7, 7) @[Regfile.scala 147:53]
    node sel_rows_7 = mux(_T_156, rows_7, UInt<1>("h00")) @[Regfile.scala 147:48]
    node _T_157 = bits(ksoe, 8, 8) @[Regfile.scala 147:53]
    node sel_rows_8 = mux(_T_157, rows_8, UInt<1>("h00")) @[Regfile.scala 147:48]
    node _T_158 = bits(ksoe, 9, 9) @[Regfile.scala 147:53]
    node sel_rows_9 = mux(_T_158, rows_9, UInt<1>("h00")) @[Regfile.scala 147:48]
    node _T_159 = bits(ksoe, 10, 10) @[Regfile.scala 147:53]
    node sel_rows_10 = mux(_T_159, rows_10, UInt<1>("h00")) @[Regfile.scala 147:48]
    node _T_160 = bits(ksoe, 11, 11) @[Regfile.scala 147:53]
    node sel_rows_11 = mux(_T_160, rows_11, UInt<1>("h00")) @[Regfile.scala 147:48]
    node _T_161 = bits(ksoe, 12, 12) @[Regfile.scala 147:53]
    node sel_rows_12 = mux(_T_161, rows_12, UInt<1>("h00")) @[Regfile.scala 147:48]
    node _T_162 = bits(ksoe, 13, 13) @[Regfile.scala 147:53]
    node sel_rows_13 = mux(_T_162, rows_13, UInt<1>("h00")) @[Regfile.scala 147:48]
    node _T_163 = bits(ksoe, 14, 14) @[Regfile.scala 147:53]
    node sel_rows_14 = mux(_T_163, rows_14, UInt<1>("h00")) @[Regfile.scala 147:48]
    node _T_164 = bits(ksoe, 15, 15) @[Regfile.scala 147:53]
    node sel_rows_15 = mux(_T_164, rows_15, UInt<1>("h00")) @[Regfile.scala 147:48]
    node _T_165 = bits(ksoe, 16, 16) @[Regfile.scala 147:53]
    node sel_rows_16 = mux(_T_165, rows_16, UInt<1>("h00")) @[Regfile.scala 147:48]
    node _T_166 = bits(ksoe, 17, 17) @[Regfile.scala 147:53]
    node sel_rows_17 = mux(_T_166, rows_17, UInt<1>("h00")) @[Regfile.scala 147:48]
    node _T_167 = mux(sel_cyc_value_17, sel_rows_17, UInt<8>("h00")) @[Mux.scala 87:16]
    node _T_168 = mux(sel_cyc_value_16, sel_rows_16, _T_167) @[Mux.scala 87:16]
    node _T_169 = mux(sel_cyc_value_15, sel_rows_15, _T_168) @[Mux.scala 87:16]
    node _T_170 = mux(sel_cyc_value_14, sel_rows_14, _T_169) @[Mux.scala 87:16]
    node _T_171 = mux(sel_cyc_value_13, sel_rows_13, _T_170) @[Mux.scala 87:16]
    node _T_172 = mux(sel_cyc_value_12, sel_rows_12, _T_171) @[Mux.scala 87:16]
    node _T_173 = mux(sel_cyc_value_11, sel_rows_11, _T_172) @[Mux.scala 87:16]
    node _T_174 = mux(sel_cyc_value_10, sel_rows_10, _T_173) @[Mux.scala 87:16]
    node _T_175 = mux(sel_cyc_value_9, sel_rows_9, _T_174) @[Mux.scala 87:16]
    node _T_176 = mux(sel_cyc_value_8, sel_rows_8, _T_175) @[Mux.scala 87:16]
    node _T_177 = mux(sel_cyc_value_7, sel_rows_7, _T_176) @[Mux.scala 87:16]
    node _T_178 = mux(sel_cyc_value_6, sel_rows_6, _T_177) @[Mux.scala 87:16]
    node _T_179 = mux(sel_cyc_value_5, sel_rows_5, _T_178) @[Mux.scala 87:16]
    node _T_180 = mux(sel_cyc_value_4, sel_rows_4, _T_179) @[Mux.scala 87:16]
    node _T_181 = mux(sel_cyc_value_3, sel_rows_3, _T_180) @[Mux.scala 87:16]
    node _T_182 = mux(sel_cyc_value_2, sel_rows_2, _T_181) @[Mux.scala 87:16]
    node _T_183 = mux(sel_cyc_value_1, sel_rows_1, _T_182) @[Mux.scala 87:16]
    node key_info = mux(sel_cyc_value_0, sel_rows_0, _T_183) @[Mux.scala 87:16]
    node _T_184 = and(key_info, ksie) @[Regfile.scala 154:34]
    io.ctl.key_preinfo <= _T_184 @[Regfile.scala 154:22]
    io.ctl.wken <= wk_en @[Regfile.scala 155:15]
    io.ctl.ksen <= ks_en @[Regfile.scala 156:15]
    node _T_185 = cat(ksoe, ksie) @[Cat.scala 29:58]
    io.ctl.ioen <= _T_185 @[Regfile.scala 157:15]
    io.ctl.pol <= pol @[Regfile.scala 158:14]
    io.ctl.deb_value <= deb_value @[Regfile.scala 159:20]
    io.ctl.rintval_value <= rintval_value @[Regfile.scala 160:24]
    io.ctl.sintval_value <= sintval_value @[Regfile.scala 161:24]
    
  module Ctl : 
    input clock : Clock
    input reset : Reset
    output io : {flip hs : {flip key_curinfo : UInt<8>, flip key_vld : UInt<1>, key_ack : UInt<1>}, flip regfile : {ksen : UInt<1>, wken : UInt<1>, key_preinfo : UInt<8>, ioen : UInt<26>, pol : UInt<1>, deb_value : UInt<4>, rintval_value : UInt<4>, sintval_value : UInt<4>, flip cyc_value : UInt<5>, flip ctl_int : UInt<1>}, gpio : {flip ks_in : UInt<8>, ks_out : UInt<18>, ks_oe : UInt<18>}}
    
    wire cyc_value : UInt<5> @[Ctl.scala 16:23]
    wire n_ks_state : UInt<3>
    n_ks_state <= UInt<3>("h00")
    reg ks_state : UInt, clock @[Ctl.scala 19:25]
    ks_state <= n_ks_state @[Ctl.scala 19:25]
    wire step_cnt_max : UInt<1> @[Ctl.scala 20:26]
    wire cyc_cnt_shift : UInt<18> @[Ctl.scala 21:27]
    wire valid_change : UInt<1> @[Ctl.scala 22:26]
    wire rintval_finish : UInt<1> @[Ctl.scala 23:28]
    wire sintval_finish : UInt<1> @[Ctl.scala 24:28]
    wire cnt_complt : UInt<1> @[Ctl.scala 25:24]
    reg key_vld : UInt, clock with : (reset => (reset, UInt<1>("h00"))) @[Ctl.scala 26:24]
    reg ks_in_d : UInt, clock @[Ctl.scala 29:24]
    ks_in_d <= io.gpio.ks_in @[Ctl.scala 29:24]
    reg ks_in_dd : UInt, clock @[Ctl.scala 30:25]
    ks_in_dd <= ks_in_d @[Ctl.scala 30:25]
    node out_en = bits(io.regfile.ioen, 25, 8) @[Ctl.scala 32:31]
    node in_en = bits(io.regfile.ioen, 7, 0) @[Ctl.scala 33:30]
    node _T = not(ks_in_dd) @[Ctl.scala 39:45]
    node _T_1 = mux(io.regfile.pol, ks_in_dd, _T) @[Ctl.scala 39:31]
    node ks_in_mask = and(in_en, _T_1) @[Ctl.scala 39:26]
    node sel_cyc_value_0 = eq(cyc_value, UInt<1>("h00")) @[Ctl.scala 40:57]
    node sel_cyc_value_1 = eq(cyc_value, UInt<1>("h01")) @[Ctl.scala 40:57]
    node sel_cyc_value_2 = eq(cyc_value, UInt<2>("h02")) @[Ctl.scala 40:57]
    node sel_cyc_value_3 = eq(cyc_value, UInt<2>("h03")) @[Ctl.scala 40:57]
    node sel_cyc_value_4 = eq(cyc_value, UInt<3>("h04")) @[Ctl.scala 40:57]
    node sel_cyc_value_5 = eq(cyc_value, UInt<3>("h05")) @[Ctl.scala 40:57]
    node sel_cyc_value_6 = eq(cyc_value, UInt<3>("h06")) @[Ctl.scala 40:57]
    node sel_cyc_value_7 = eq(cyc_value, UInt<3>("h07")) @[Ctl.scala 40:57]
    node sel_cyc_value_8 = eq(cyc_value, UInt<4>("h08")) @[Ctl.scala 40:57]
    node sel_cyc_value_9 = eq(cyc_value, UInt<4>("h09")) @[Ctl.scala 40:57]
    node sel_cyc_value_10 = eq(cyc_value, UInt<4>("h0a")) @[Ctl.scala 40:57]
    node sel_cyc_value_11 = eq(cyc_value, UInt<4>("h0b")) @[Ctl.scala 40:57]
    node sel_cyc_value_12 = eq(cyc_value, UInt<4>("h0c")) @[Ctl.scala 40:57]
    node sel_cyc_value_13 = eq(cyc_value, UInt<4>("h0d")) @[Ctl.scala 40:57]
    node sel_cyc_value_14 = eq(cyc_value, UInt<4>("h0e")) @[Ctl.scala 40:57]
    node sel_cyc_value_15 = eq(cyc_value, UInt<4>("h0f")) @[Ctl.scala 40:57]
    node sel_cyc_value_16 = eq(cyc_value, UInt<5>("h010")) @[Ctl.scala 40:57]
    node sel_cyc_value_17 = eq(cyc_value, UInt<5>("h011")) @[Ctl.scala 40:57]
    node _T_2 = bits(out_en, 0, 0) @[Ctl.scala 41:58]
    node sel_ks_in_mask_0 = mux(_T_2, ks_in_mask, UInt<1>("h00")) @[Ctl.scala 41:51]
    node _T_3 = bits(out_en, 1, 1) @[Ctl.scala 41:58]
    node sel_ks_in_mask_1 = mux(_T_3, ks_in_mask, UInt<1>("h00")) @[Ctl.scala 41:51]
    node _T_4 = bits(out_en, 2, 2) @[Ctl.scala 41:58]
    node sel_ks_in_mask_2 = mux(_T_4, ks_in_mask, UInt<1>("h00")) @[Ctl.scala 41:51]
    node _T_5 = bits(out_en, 3, 3) @[Ctl.scala 41:58]
    node sel_ks_in_mask_3 = mux(_T_5, ks_in_mask, UInt<1>("h00")) @[Ctl.scala 41:51]
    node _T_6 = bits(out_en, 4, 4) @[Ctl.scala 41:58]
    node sel_ks_in_mask_4 = mux(_T_6, ks_in_mask, UInt<1>("h00")) @[Ctl.scala 41:51]
    node _T_7 = bits(out_en, 5, 5) @[Ctl.scala 41:58]
    node sel_ks_in_mask_5 = mux(_T_7, ks_in_mask, UInt<1>("h00")) @[Ctl.scala 41:51]
    node _T_8 = bits(out_en, 6, 6) @[Ctl.scala 41:58]
    node sel_ks_in_mask_6 = mux(_T_8, ks_in_mask, UInt<1>("h00")) @[Ctl.scala 41:51]
    node _T_9 = bits(out_en, 7, 7) @[Ctl.scala 41:58]
    node sel_ks_in_mask_7 = mux(_T_9, ks_in_mask, UInt<1>("h00")) @[Ctl.scala 41:51]
    node _T_10 = bits(out_en, 8, 8) @[Ctl.scala 41:58]
    node sel_ks_in_mask_8 = mux(_T_10, ks_in_mask, UInt<1>("h00")) @[Ctl.scala 41:51]
    node _T_11 = bits(out_en, 9, 9) @[Ctl.scala 41:58]
    node sel_ks_in_mask_9 = mux(_T_11, ks_in_mask, UInt<1>("h00")) @[Ctl.scala 41:51]
    node _T_12 = bits(out_en, 10, 10) @[Ctl.scala 41:58]
    node sel_ks_in_mask_10 = mux(_T_12, ks_in_mask, UInt<1>("h00")) @[Ctl.scala 41:51]
    node _T_13 = bits(out_en, 11, 11) @[Ctl.scala 41:58]
    node sel_ks_in_mask_11 = mux(_T_13, ks_in_mask, UInt<1>("h00")) @[Ctl.scala 41:51]
    node _T_14 = bits(out_en, 12, 12) @[Ctl.scala 41:58]
    node sel_ks_in_mask_12 = mux(_T_14, ks_in_mask, UInt<1>("h00")) @[Ctl.scala 41:51]
    node _T_15 = bits(out_en, 13, 13) @[Ctl.scala 41:58]
    node sel_ks_in_mask_13 = mux(_T_15, ks_in_mask, UInt<1>("h00")) @[Ctl.scala 41:51]
    node _T_16 = bits(out_en, 14, 14) @[Ctl.scala 41:58]
    node sel_ks_in_mask_14 = mux(_T_16, ks_in_mask, UInt<1>("h00")) @[Ctl.scala 41:51]
    node _T_17 = bits(out_en, 15, 15) @[Ctl.scala 41:58]
    node sel_ks_in_mask_15 = mux(_T_17, ks_in_mask, UInt<1>("h00")) @[Ctl.scala 41:51]
    node _T_18 = bits(out_en, 16, 16) @[Ctl.scala 41:58]
    node sel_ks_in_mask_16 = mux(_T_18, ks_in_mask, UInt<1>("h00")) @[Ctl.scala 41:51]
    node _T_19 = bits(out_en, 17, 17) @[Ctl.scala 41:58]
    node sel_ks_in_mask_17 = mux(_T_19, ks_in_mask, UInt<1>("h00")) @[Ctl.scala 41:51]
    node _T_20 = mux(sel_cyc_value_17, sel_ks_in_mask_17, UInt<1>("h00")) @[Mux.scala 87:16]
    node _T_21 = mux(sel_cyc_value_16, sel_ks_in_mask_16, _T_20) @[Mux.scala 87:16]
    node _T_22 = mux(sel_cyc_value_15, sel_ks_in_mask_15, _T_21) @[Mux.scala 87:16]
    node _T_23 = mux(sel_cyc_value_14, sel_ks_in_mask_14, _T_22) @[Mux.scala 87:16]
    node _T_24 = mux(sel_cyc_value_13, sel_ks_in_mask_13, _T_23) @[Mux.scala 87:16]
    node _T_25 = mux(sel_cyc_value_12, sel_ks_in_mask_12, _T_24) @[Mux.scala 87:16]
    node _T_26 = mux(sel_cyc_value_11, sel_ks_in_mask_11, _T_25) @[Mux.scala 87:16]
    node _T_27 = mux(sel_cyc_value_10, sel_ks_in_mask_10, _T_26) @[Mux.scala 87:16]
    node _T_28 = mux(sel_cyc_value_9, sel_ks_in_mask_9, _T_27) @[Mux.scala 87:16]
    node _T_29 = mux(sel_cyc_value_8, sel_ks_in_mask_8, _T_28) @[Mux.scala 87:16]
    node _T_30 = mux(sel_cyc_value_7, sel_ks_in_mask_7, _T_29) @[Mux.scala 87:16]
    node _T_31 = mux(sel_cyc_value_6, sel_ks_in_mask_6, _T_30) @[Mux.scala 87:16]
    node _T_32 = mux(sel_cyc_value_5, sel_ks_in_mask_5, _T_31) @[Mux.scala 87:16]
    node _T_33 = mux(sel_cyc_value_4, sel_ks_in_mask_4, _T_32) @[Mux.scala 87:16]
    node _T_34 = mux(sel_cyc_value_3, sel_ks_in_mask_3, _T_33) @[Mux.scala 87:16]
    node _T_35 = mux(sel_cyc_value_2, sel_ks_in_mask_2, _T_34) @[Mux.scala 87:16]
    node _T_36 = mux(sel_cyc_value_1, sel_ks_in_mask_1, _T_35) @[Mux.scala 87:16]
    node key_cur_st = mux(sel_cyc_value_0, sel_ks_in_mask_0, _T_36) @[Mux.scala 87:16]
    node _T_37 = eq(ks_state, UInt<3>("h02")) @[Ctl.scala 43:33]
    node _T_38 = and(_T_37, step_cnt_max) @[Ctl.scala 43:45]
    node _T_39 = eq(io.regfile.key_preinfo, key_cur_st) @[Ctl.scala 43:72]
    node _T_40 = eq(_T_39, UInt<1>("h00")) @[Ctl.scala 43:60]
    node key_change = mux(_T_38, _T_40, UInt<1>("h00")) @[Ctl.scala 43:23]
    reg key_cur_st_d : UInt, clock @[Ctl.scala 44:29]
    key_cur_st_d <= key_cur_st @[Ctl.scala 44:29]
    node _T_41 = eq(ks_state, UInt<3>("h03")) @[Ctl.scala 45:31]
    node _T_42 = eq(key_cur_st, key_cur_st_d) @[Ctl.scala 45:54]
    node _T_43 = eq(_T_42, UInt<1>("h00")) @[Ctl.scala 45:41]
    node key_pulse = mux(_T_41, _T_43, UInt<1>("h00")) @[Ctl.scala 45:22]
    reg f_ks_oe : UInt, clock with : (reset => (reset, UInt<1>("h00"))) @[Ctl.scala 53:24]
    node m_ks_oe = and(cyc_cnt_shift, out_en) @[Ctl.scala 54:31]
    node _T_44 = eq(ks_state, UInt<3>("h01")) @[Ctl.scala 55:17]
    node _T_45 = eq(ks_state, UInt<3>("h04")) @[Ctl.scala 55:43]
    node _T_46 = or(_T_44, _T_45) @[Ctl.scala 55:32]
    node _T_47 = eq(n_ks_state, UInt<3>("h02")) @[Ctl.scala 55:69]
    node _T_48 = and(_T_46, _T_47) @[Ctl.scala 55:55]
    when _T_48 : @[Ctl.scala 55:81]
      f_ks_oe <= m_ks_oe @[Ctl.scala 56:13]
      skip @[Ctl.scala 55:81]
    else : @[Ctl.scala 57:87]
      node _T_49 = eq(n_ks_state, UInt<3>("h01")) @[Ctl.scala 57:24]
      node _T_50 = eq(n_ks_state, UInt<3>("h00")) @[Ctl.scala 57:52]
      node _T_51 = or(_T_49, _T_50) @[Ctl.scala 57:39]
      node _T_52 = eq(n_ks_state, UInt<3>("h04")) @[Ctl.scala 57:76]
      node _T_53 = or(_T_51, _T_52) @[Ctl.scala 57:63]
      when _T_53 : @[Ctl.scala 57:87]
        f_ks_oe <= UInt<1>("h00") @[Ctl.scala 58:13]
        skip @[Ctl.scala 57:87]
    reg f_ks_out : UInt, clock with : (reset => (reset, UInt<1>("h00"))) @[Ctl.scala 67:25]
    wire m_ks_out : UInt<1>[18] @[Ctl.scala 68:22]
    node _T_54 = bits(out_en, 0, 0) @[Ctl.scala 69:44]
    node _T_55 = bits(cyc_cnt_shift, 0, 0) @[Ctl.scala 69:69]
    node _T_56 = bits(cyc_cnt_shift, 0, 0) @[Ctl.scala 69:87]
    node _T_57 = not(_T_56) @[Ctl.scala 69:73]
    node _T_58 = mux(io.regfile.pol, _T_55, _T_57) @[Ctl.scala 69:51]
    node _T_59 = not(io.regfile.pol) @[Ctl.scala 69:92]
    node _T_60 = mux(_T_54, _T_58, _T_59) @[Ctl.scala 69:37]
    m_ks_out[0] <= _T_60 @[Ctl.scala 69:31]
    node _T_61 = bits(out_en, 1, 1) @[Ctl.scala 69:44]
    node _T_62 = bits(cyc_cnt_shift, 1, 1) @[Ctl.scala 69:69]
    node _T_63 = bits(cyc_cnt_shift, 1, 1) @[Ctl.scala 69:87]
    node _T_64 = not(_T_63) @[Ctl.scala 69:73]
    node _T_65 = mux(io.regfile.pol, _T_62, _T_64) @[Ctl.scala 69:51]
    node _T_66 = not(io.regfile.pol) @[Ctl.scala 69:92]
    node _T_67 = mux(_T_61, _T_65, _T_66) @[Ctl.scala 69:37]
    m_ks_out[1] <= _T_67 @[Ctl.scala 69:31]
    node _T_68 = bits(out_en, 2, 2) @[Ctl.scala 69:44]
    node _T_69 = bits(cyc_cnt_shift, 2, 2) @[Ctl.scala 69:69]
    node _T_70 = bits(cyc_cnt_shift, 2, 2) @[Ctl.scala 69:87]
    node _T_71 = not(_T_70) @[Ctl.scala 69:73]
    node _T_72 = mux(io.regfile.pol, _T_69, _T_71) @[Ctl.scala 69:51]
    node _T_73 = not(io.regfile.pol) @[Ctl.scala 69:92]
    node _T_74 = mux(_T_68, _T_72, _T_73) @[Ctl.scala 69:37]
    m_ks_out[2] <= _T_74 @[Ctl.scala 69:31]
    node _T_75 = bits(out_en, 3, 3) @[Ctl.scala 69:44]
    node _T_76 = bits(cyc_cnt_shift, 3, 3) @[Ctl.scala 69:69]
    node _T_77 = bits(cyc_cnt_shift, 3, 3) @[Ctl.scala 69:87]
    node _T_78 = not(_T_77) @[Ctl.scala 69:73]
    node _T_79 = mux(io.regfile.pol, _T_76, _T_78) @[Ctl.scala 69:51]
    node _T_80 = not(io.regfile.pol) @[Ctl.scala 69:92]
    node _T_81 = mux(_T_75, _T_79, _T_80) @[Ctl.scala 69:37]
    m_ks_out[3] <= _T_81 @[Ctl.scala 69:31]
    node _T_82 = bits(out_en, 4, 4) @[Ctl.scala 69:44]
    node _T_83 = bits(cyc_cnt_shift, 4, 4) @[Ctl.scala 69:69]
    node _T_84 = bits(cyc_cnt_shift, 4, 4) @[Ctl.scala 69:87]
    node _T_85 = not(_T_84) @[Ctl.scala 69:73]
    node _T_86 = mux(io.regfile.pol, _T_83, _T_85) @[Ctl.scala 69:51]
    node _T_87 = not(io.regfile.pol) @[Ctl.scala 69:92]
    node _T_88 = mux(_T_82, _T_86, _T_87) @[Ctl.scala 69:37]
    m_ks_out[4] <= _T_88 @[Ctl.scala 69:31]
    node _T_89 = bits(out_en, 5, 5) @[Ctl.scala 69:44]
    node _T_90 = bits(cyc_cnt_shift, 5, 5) @[Ctl.scala 69:69]
    node _T_91 = bits(cyc_cnt_shift, 5, 5) @[Ctl.scala 69:87]
    node _T_92 = not(_T_91) @[Ctl.scala 69:73]
    node _T_93 = mux(io.regfile.pol, _T_90, _T_92) @[Ctl.scala 69:51]
    node _T_94 = not(io.regfile.pol) @[Ctl.scala 69:92]
    node _T_95 = mux(_T_89, _T_93, _T_94) @[Ctl.scala 69:37]
    m_ks_out[5] <= _T_95 @[Ctl.scala 69:31]
    node _T_96 = bits(out_en, 6, 6) @[Ctl.scala 69:44]
    node _T_97 = bits(cyc_cnt_shift, 6, 6) @[Ctl.scala 69:69]
    node _T_98 = bits(cyc_cnt_shift, 6, 6) @[Ctl.scala 69:87]
    node _T_99 = not(_T_98) @[Ctl.scala 69:73]
    node _T_100 = mux(io.regfile.pol, _T_97, _T_99) @[Ctl.scala 69:51]
    node _T_101 = not(io.regfile.pol) @[Ctl.scala 69:92]
    node _T_102 = mux(_T_96, _T_100, _T_101) @[Ctl.scala 69:37]
    m_ks_out[6] <= _T_102 @[Ctl.scala 69:31]
    node _T_103 = bits(out_en, 7, 7) @[Ctl.scala 69:44]
    node _T_104 = bits(cyc_cnt_shift, 7, 7) @[Ctl.scala 69:69]
    node _T_105 = bits(cyc_cnt_shift, 7, 7) @[Ctl.scala 69:87]
    node _T_106 = not(_T_105) @[Ctl.scala 69:73]
    node _T_107 = mux(io.regfile.pol, _T_104, _T_106) @[Ctl.scala 69:51]
    node _T_108 = not(io.regfile.pol) @[Ctl.scala 69:92]
    node _T_109 = mux(_T_103, _T_107, _T_108) @[Ctl.scala 69:37]
    m_ks_out[7] <= _T_109 @[Ctl.scala 69:31]
    node _T_110 = bits(out_en, 8, 8) @[Ctl.scala 69:44]
    node _T_111 = bits(cyc_cnt_shift, 8, 8) @[Ctl.scala 69:69]
    node _T_112 = bits(cyc_cnt_shift, 8, 8) @[Ctl.scala 69:87]
    node _T_113 = not(_T_112) @[Ctl.scala 69:73]
    node _T_114 = mux(io.regfile.pol, _T_111, _T_113) @[Ctl.scala 69:51]
    node _T_115 = not(io.regfile.pol) @[Ctl.scala 69:92]
    node _T_116 = mux(_T_110, _T_114, _T_115) @[Ctl.scala 69:37]
    m_ks_out[8] <= _T_116 @[Ctl.scala 69:31]
    node _T_117 = bits(out_en, 9, 9) @[Ctl.scala 69:44]
    node _T_118 = bits(cyc_cnt_shift, 9, 9) @[Ctl.scala 69:69]
    node _T_119 = bits(cyc_cnt_shift, 9, 9) @[Ctl.scala 69:87]
    node _T_120 = not(_T_119) @[Ctl.scala 69:73]
    node _T_121 = mux(io.regfile.pol, _T_118, _T_120) @[Ctl.scala 69:51]
    node _T_122 = not(io.regfile.pol) @[Ctl.scala 69:92]
    node _T_123 = mux(_T_117, _T_121, _T_122) @[Ctl.scala 69:37]
    m_ks_out[9] <= _T_123 @[Ctl.scala 69:31]
    node _T_124 = bits(out_en, 10, 10) @[Ctl.scala 69:44]
    node _T_125 = bits(cyc_cnt_shift, 10, 10) @[Ctl.scala 69:69]
    node _T_126 = bits(cyc_cnt_shift, 10, 10) @[Ctl.scala 69:87]
    node _T_127 = not(_T_126) @[Ctl.scala 69:73]
    node _T_128 = mux(io.regfile.pol, _T_125, _T_127) @[Ctl.scala 69:51]
    node _T_129 = not(io.regfile.pol) @[Ctl.scala 69:92]
    node _T_130 = mux(_T_124, _T_128, _T_129) @[Ctl.scala 69:37]
    m_ks_out[10] <= _T_130 @[Ctl.scala 69:31]
    node _T_131 = bits(out_en, 11, 11) @[Ctl.scala 69:44]
    node _T_132 = bits(cyc_cnt_shift, 11, 11) @[Ctl.scala 69:69]
    node _T_133 = bits(cyc_cnt_shift, 11, 11) @[Ctl.scala 69:87]
    node _T_134 = not(_T_133) @[Ctl.scala 69:73]
    node _T_135 = mux(io.regfile.pol, _T_132, _T_134) @[Ctl.scala 69:51]
    node _T_136 = not(io.regfile.pol) @[Ctl.scala 69:92]
    node _T_137 = mux(_T_131, _T_135, _T_136) @[Ctl.scala 69:37]
    m_ks_out[11] <= _T_137 @[Ctl.scala 69:31]
    node _T_138 = bits(out_en, 12, 12) @[Ctl.scala 69:44]
    node _T_139 = bits(cyc_cnt_shift, 12, 12) @[Ctl.scala 69:69]
    node _T_140 = bits(cyc_cnt_shift, 12, 12) @[Ctl.scala 69:87]
    node _T_141 = not(_T_140) @[Ctl.scala 69:73]
    node _T_142 = mux(io.regfile.pol, _T_139, _T_141) @[Ctl.scala 69:51]
    node _T_143 = not(io.regfile.pol) @[Ctl.scala 69:92]
    node _T_144 = mux(_T_138, _T_142, _T_143) @[Ctl.scala 69:37]
    m_ks_out[12] <= _T_144 @[Ctl.scala 69:31]
    node _T_145 = bits(out_en, 13, 13) @[Ctl.scala 69:44]
    node _T_146 = bits(cyc_cnt_shift, 13, 13) @[Ctl.scala 69:69]
    node _T_147 = bits(cyc_cnt_shift, 13, 13) @[Ctl.scala 69:87]
    node _T_148 = not(_T_147) @[Ctl.scala 69:73]
    node _T_149 = mux(io.regfile.pol, _T_146, _T_148) @[Ctl.scala 69:51]
    node _T_150 = not(io.regfile.pol) @[Ctl.scala 69:92]
    node _T_151 = mux(_T_145, _T_149, _T_150) @[Ctl.scala 69:37]
    m_ks_out[13] <= _T_151 @[Ctl.scala 69:31]
    node _T_152 = bits(out_en, 14, 14) @[Ctl.scala 69:44]
    node _T_153 = bits(cyc_cnt_shift, 14, 14) @[Ctl.scala 69:69]
    node _T_154 = bits(cyc_cnt_shift, 14, 14) @[Ctl.scala 69:87]
    node _T_155 = not(_T_154) @[Ctl.scala 69:73]
    node _T_156 = mux(io.regfile.pol, _T_153, _T_155) @[Ctl.scala 69:51]
    node _T_157 = not(io.regfile.pol) @[Ctl.scala 69:92]
    node _T_158 = mux(_T_152, _T_156, _T_157) @[Ctl.scala 69:37]
    m_ks_out[14] <= _T_158 @[Ctl.scala 69:31]
    node _T_159 = bits(out_en, 15, 15) @[Ctl.scala 69:44]
    node _T_160 = bits(cyc_cnt_shift, 15, 15) @[Ctl.scala 69:69]
    node _T_161 = bits(cyc_cnt_shift, 15, 15) @[Ctl.scala 69:87]
    node _T_162 = not(_T_161) @[Ctl.scala 69:73]
    node _T_163 = mux(io.regfile.pol, _T_160, _T_162) @[Ctl.scala 69:51]
    node _T_164 = not(io.regfile.pol) @[Ctl.scala 69:92]
    node _T_165 = mux(_T_159, _T_163, _T_164) @[Ctl.scala 69:37]
    m_ks_out[15] <= _T_165 @[Ctl.scala 69:31]
    node _T_166 = bits(out_en, 16, 16) @[Ctl.scala 69:44]
    node _T_167 = bits(cyc_cnt_shift, 16, 16) @[Ctl.scala 69:69]
    node _T_168 = bits(cyc_cnt_shift, 16, 16) @[Ctl.scala 69:87]
    node _T_169 = not(_T_168) @[Ctl.scala 69:73]
    node _T_170 = mux(io.regfile.pol, _T_167, _T_169) @[Ctl.scala 69:51]
    node _T_171 = not(io.regfile.pol) @[Ctl.scala 69:92]
    node _T_172 = mux(_T_166, _T_170, _T_171) @[Ctl.scala 69:37]
    m_ks_out[16] <= _T_172 @[Ctl.scala 69:31]
    node _T_173 = bits(out_en, 17, 17) @[Ctl.scala 69:44]
    node _T_174 = bits(cyc_cnt_shift, 17, 17) @[Ctl.scala 69:69]
    node _T_175 = bits(cyc_cnt_shift, 17, 17) @[Ctl.scala 69:87]
    node _T_176 = not(_T_175) @[Ctl.scala 69:73]
    node _T_177 = mux(io.regfile.pol, _T_174, _T_176) @[Ctl.scala 69:51]
    node _T_178 = not(io.regfile.pol) @[Ctl.scala 69:92]
    node _T_179 = mux(_T_173, _T_177, _T_178) @[Ctl.scala 69:37]
    m_ks_out[17] <= _T_179 @[Ctl.scala 69:31]
    node _T_180 = eq(ks_state, UInt<3>("h01")) @[Ctl.scala 70:17]
    node _T_181 = eq(ks_state, UInt<3>("h04")) @[Ctl.scala 70:43]
    node _T_182 = or(_T_180, _T_181) @[Ctl.scala 70:32]
    node _T_183 = eq(n_ks_state, UInt<3>("h02")) @[Ctl.scala 70:69]
    node _T_184 = and(_T_182, _T_183) @[Ctl.scala 70:55]
    when _T_184 : @[Ctl.scala 70:81]
      node _T_185 = cat(m_ks_out[1], m_ks_out[0]) @[Ctl.scala 71:32]
      node _T_186 = cat(m_ks_out[3], m_ks_out[2]) @[Ctl.scala 71:32]
      node _T_187 = cat(_T_186, _T_185) @[Ctl.scala 71:32]
      node _T_188 = cat(m_ks_out[5], m_ks_out[4]) @[Ctl.scala 71:32]
      node _T_189 = cat(m_ks_out[8], m_ks_out[7]) @[Ctl.scala 71:32]
      node _T_190 = cat(_T_189, m_ks_out[6]) @[Ctl.scala 71:32]
      node _T_191 = cat(_T_190, _T_188) @[Ctl.scala 71:32]
      node _T_192 = cat(_T_191, _T_187) @[Ctl.scala 71:32]
      node _T_193 = cat(m_ks_out[10], m_ks_out[9]) @[Ctl.scala 71:32]
      node _T_194 = cat(m_ks_out[12], m_ks_out[11]) @[Ctl.scala 71:32]
      node _T_195 = cat(_T_194, _T_193) @[Ctl.scala 71:32]
      node _T_196 = cat(m_ks_out[14], m_ks_out[13]) @[Ctl.scala 71:32]
      node _T_197 = cat(m_ks_out[17], m_ks_out[16]) @[Ctl.scala 71:32]
      node _T_198 = cat(_T_197, m_ks_out[15]) @[Ctl.scala 71:32]
      node _T_199 = cat(_T_198, _T_196) @[Ctl.scala 71:32]
      node _T_200 = cat(_T_199, _T_195) @[Ctl.scala 71:32]
      node _T_201 = cat(_T_200, _T_192) @[Ctl.scala 71:32]
      f_ks_out <= _T_201 @[Ctl.scala 71:14]
      skip @[Ctl.scala 70:81]
    else : @[Ctl.scala 72:63]
      node _T_202 = eq(n_ks_state, UInt<3>("h01")) @[Ctl.scala 72:24]
      node _T_203 = eq(n_ks_state, UInt<3>("h00")) @[Ctl.scala 72:52]
      node _T_204 = or(_T_202, _T_203) @[Ctl.scala 72:39]
      when _T_204 : @[Ctl.scala 72:63]
        node _T_205 = mux(io.regfile.pol, UInt<1>("h00"), UInt<18>("h03ffff")) @[Ctl.scala 73:20]
        f_ks_out <= _T_205 @[Ctl.scala 73:14]
        skip @[Ctl.scala 72:63]
    node deb_cnt_max = dshl(UInt<1>("h01"), io.regfile.deb_value) @[Ctl.scala 81:32]
    reg deb_cnt : UInt<16>, clock with : (reset => (reset, UInt<16>("h00"))) @[Ctl.scala 82:24]
    node _T_206 = eq(io.regfile.ksen, UInt<1>("h00")) @[Ctl.scala 83:8]
    when _T_206 : @[Ctl.scala 83:15]
      deb_cnt <= UInt<1>("h00") @[Ctl.scala 84:13]
      skip @[Ctl.scala 83:15]
    else : @[Ctl.scala 85:49]
      node _T_207 = eq(ks_state, UInt<3>("h03")) @[Ctl.scala 85:22]
      node _T_208 = eq(valid_change, UInt<1>("h00")) @[Ctl.scala 85:35]
      node _T_209 = and(_T_207, _T_208) @[Ctl.scala 85:32]
      when _T_209 : @[Ctl.scala 85:49]
        node _T_210 = add(deb_cnt, UInt<1>("h01")) @[Ctl.scala 86:24]
        node _T_211 = tail(_T_210, 1) @[Ctl.scala 86:24]
        deb_cnt <= _T_211 @[Ctl.scala 86:13]
        skip @[Ctl.scala 85:49]
      else : @[Ctl.scala 87:14]
        deb_cnt <= UInt<1>("h00") @[Ctl.scala 88:13]
        skip @[Ctl.scala 87:14]
    node _T_212 = eq(deb_cnt, deb_cnt_max) @[Ctl.scala 90:27]
    node _T_213 = eq(key_pulse, UInt<1>("h00")) @[Ctl.scala 90:46]
    node _T_214 = and(_T_212, _T_213) @[Ctl.scala 90:43]
    node _T_215 = eq(key_cur_st, io.regfile.key_preinfo) @[Ctl.scala 90:73]
    node _T_216 = eq(_T_215, UInt<1>("h00")) @[Ctl.scala 90:60]
    node _T_217 = and(_T_214, _T_216) @[Ctl.scala 90:57]
    valid_change <= _T_217 @[Ctl.scala 90:16]
    node sintval_cnt_max = dshl(UInt<1>("h01"), io.regfile.sintval_value) @[Ctl.scala 97:36]
    reg sintval_cnt : UInt<16>, clock with : (reset => (reset, UInt<16>("h00"))) @[Ctl.scala 98:28]
    node _T_218 = eq(io.regfile.ksen, UInt<1>("h00")) @[Ctl.scala 99:8]
    when _T_218 : @[Ctl.scala 99:15]
      sintval_cnt <= UInt<1>("h00") @[Ctl.scala 100:17]
      skip @[Ctl.scala 99:15]
    else : @[Ctl.scala 101:56]
      node _T_219 = eq(ks_state, UInt<3>("h01")) @[Ctl.scala 101:22]
      node _T_220 = eq(sintval_finish, UInt<1>("h00")) @[Ctl.scala 101:40]
      node _T_221 = and(_T_219, _T_220) @[Ctl.scala 101:37]
      when _T_221 : @[Ctl.scala 101:56]
        node _T_222 = add(sintval_cnt, UInt<1>("h01")) @[Ctl.scala 102:32]
        node _T_223 = tail(_T_222, 1) @[Ctl.scala 102:32]
        sintval_cnt <= _T_223 @[Ctl.scala 102:17]
        skip @[Ctl.scala 101:56]
      else : @[Ctl.scala 103:14]
        sintval_cnt <= UInt<1>("h00") @[Ctl.scala 104:17]
        skip @[Ctl.scala 103:14]
    node _T_224 = eq(sintval_cnt, sintval_cnt_max) @[Ctl.scala 106:32]
    sintval_finish <= _T_224 @[Ctl.scala 106:18]
    reg rintval_cnt : UInt<4>, clock with : (reset => (reset, UInt<4>("h00"))) @[Ctl.scala 112:28]
    node _T_225 = eq(io.regfile.ksen, UInt<1>("h00")) @[Ctl.scala 113:8]
    when _T_225 : @[Ctl.scala 113:15]
      rintval_cnt <= UInt<1>("h00") @[Ctl.scala 114:16]
      skip @[Ctl.scala 113:15]
    else : @[Ctl.scala 115:52]
      node _T_226 = eq(ks_state, UInt<3>("h04")) @[Ctl.scala 115:22]
      node _T_227 = eq(rintval_finish, UInt<1>("h00")) @[Ctl.scala 115:36]
      node _T_228 = and(_T_226, _T_227) @[Ctl.scala 115:33]
      when _T_228 : @[Ctl.scala 115:52]
        node _T_229 = add(rintval_cnt, UInt<1>("h01")) @[Ctl.scala 116:31]
        node _T_230 = tail(_T_229, 1) @[Ctl.scala 116:31]
        rintval_cnt <= _T_230 @[Ctl.scala 116:16]
        skip @[Ctl.scala 115:52]
      else : @[Ctl.scala 117:14]
        rintval_cnt <= UInt<1>("h00") @[Ctl.scala 118:16]
        skip @[Ctl.scala 117:14]
    node _T_231 = eq(rintval_cnt, io.regfile.rintval_value) @[Ctl.scala 120:33]
    rintval_finish <= _T_231 @[Ctl.scala 120:18]
    reg step_cnt : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[Ctl.scala 125:25]
    node _T_232 = eq(n_ks_state, UInt<3>("h02")) @[Ctl.scala 126:18]
    when _T_232 : @[Ctl.scala 126:29]
      node _T_233 = add(step_cnt, UInt<1>("h01")) @[Ctl.scala 127:23]
      node _T_234 = tail(_T_233, 1) @[Ctl.scala 127:23]
      step_cnt <= _T_234 @[Ctl.scala 127:13]
      skip @[Ctl.scala 126:29]
    else : @[Ctl.scala 128:14]
      step_cnt <= UInt<1>("h00") @[Ctl.scala 129:13]
      skip @[Ctl.scala 128:14]
    node _T_235 = eq(step_cnt, UInt<2>("h03")) @[Ctl.scala 131:27]
    step_cnt_max <= _T_235 @[Ctl.scala 131:16]
    node _T_236 = eq(UInt<3>("h00"), ks_state) @[Conditional.scala 37:30]
    when _T_236 : @[Conditional.scala 40:58]
      node _T_237 = eq(io.regfile.ksen, UInt<1>("h01")) @[Ctl.scala 145:17]
      when _T_237 : @[Ctl.scala 145:24]
        n_ks_state <= UInt<3>("h01") @[Ctl.scala 146:19]
        skip @[Ctl.scala 145:24]
      else : @[Ctl.scala 147:18]
        n_ks_state <= ks_state @[Ctl.scala 148:20]
        skip @[Ctl.scala 147:18]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_238 = eq(UInt<3>("h01"), ks_state) @[Conditional.scala 37:30]
      when _T_238 : @[Conditional.scala 39:67]
        node _T_239 = eq(io.regfile.ksen, UInt<1>("h00")) @[Ctl.scala 152:12]
        when _T_239 : @[Ctl.scala 152:19]
          n_ks_state <= UInt<3>("h00") @[Ctl.scala 153:19]
          skip @[Ctl.scala 152:19]
        else : @[Ctl.scala 154:33]
          when sintval_finish : @[Ctl.scala 154:33]
            n_ks_state <= UInt<3>("h02") @[Ctl.scala 155:19]
            skip @[Ctl.scala 154:33]
          else : @[Ctl.scala 156:18]
            n_ks_state <= ks_state @[Ctl.scala 157:20]
            skip @[Ctl.scala 156:18]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_240 = eq(UInt<3>("h02"), ks_state) @[Conditional.scala 37:30]
        when _T_240 : @[Conditional.scala 39:67]
          node _T_241 = eq(io.regfile.ksen, UInt<1>("h00")) @[Ctl.scala 161:12]
          when _T_241 : @[Ctl.scala 161:19]
            n_ks_state <= UInt<3>("h00") @[Ctl.scala 162:19]
            skip @[Ctl.scala 161:19]
          else : @[Ctl.scala 163:31]
            when step_cnt_max : @[Ctl.scala 163:31]
              node _T_242 = bits(key_change, 0, 0) @[Ctl.scala 164:31]
              when _T_242 : @[Ctl.scala 164:34]
                n_ks_state <= UInt<3>("h03") @[Ctl.scala 165:21]
                skip @[Ctl.scala 164:34]
              else : @[Ctl.scala 166:20]
                n_ks_state <= UInt<3>("h04") @[Ctl.scala 167:21]
                skip @[Ctl.scala 166:20]
              skip @[Ctl.scala 163:31]
            else : @[Ctl.scala 169:18]
              n_ks_state <= ks_state @[Ctl.scala 170:20]
              skip @[Ctl.scala 169:18]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_243 = eq(UInt<3>("h03"), ks_state) @[Conditional.scala 37:30]
          when _T_243 : @[Conditional.scala 39:67]
            node _T_244 = eq(io.regfile.ksen, UInt<1>("h00")) @[Ctl.scala 174:12]
            when _T_244 : @[Ctl.scala 174:19]
              n_ks_state <= UInt<3>("h00") @[Ctl.scala 175:19]
              skip @[Ctl.scala 174:19]
            else : @[Ctl.scala 176:54]
              node _T_245 = or(key_pulse, valid_change) @[Ctl.scala 176:29]
              node _T_246 = bits(_T_245, 0, 0) @[Ctl.scala 176:51]
              when _T_246 : @[Ctl.scala 176:54]
                n_ks_state <= UInt<3>("h04") @[Ctl.scala 177:19]
                skip @[Ctl.scala 176:54]
              else : @[Ctl.scala 178:18]
                n_ks_state <= ks_state @[Ctl.scala 179:20]
                skip @[Ctl.scala 178:18]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_247 = eq(UInt<3>("h04"), ks_state) @[Conditional.scala 37:30]
            when _T_247 : @[Conditional.scala 39:67]
              node _T_248 = eq(io.regfile.ksen, UInt<1>("h00")) @[Ctl.scala 183:12]
              when _T_248 : @[Ctl.scala 183:19]
                n_ks_state <= UInt<3>("h00") @[Ctl.scala 184:19]
                skip @[Ctl.scala 183:19]
              else : @[Ctl.scala 185:40]
                node _T_249 = eq(key_vld, UInt<1>("h00")) @[Ctl.scala 185:31]
                node _T_250 = and(cnt_complt, _T_249) @[Ctl.scala 185:29]
                when _T_250 : @[Ctl.scala 185:40]
                  n_ks_state <= UInt<3>("h01") @[Ctl.scala 186:19]
                  skip @[Ctl.scala 185:40]
                else : @[Ctl.scala 187:44]
                  node _T_251 = eq(key_vld, UInt<1>("h00")) @[Ctl.scala 187:35]
                  node _T_252 = and(rintval_finish, _T_251) @[Ctl.scala 187:33]
                  when _T_252 : @[Ctl.scala 187:44]
                    n_ks_state <= UInt<3>("h02") @[Ctl.scala 188:20]
                    skip @[Ctl.scala 187:44]
                  else : @[Ctl.scala 189:18]
                    n_ks_state <= ks_state @[Ctl.scala 190:20]
                    skip @[Ctl.scala 189:18]
              skip @[Conditional.scala 39:67]
    reg cyc_cnt : UInt<18>, clock with : (reset => (reset, UInt<18>("h00"))) @[Ctl.scala 198:24]
    node _T_253 = bits(cyc_cnt, 16, 0) @[Ctl.scala 199:31]
    node _T_254 = bits(cyc_cnt, 17, 17) @[Ctl.scala 199:45]
    node _T_255 = cat(_T_253, _T_254) @[Cat.scala 29:58]
    cyc_cnt_shift <= _T_255 @[Ctl.scala 199:17]
    node _T_256 = eq(cyc_cnt, UInt<18>("h020000")) @[Ctl.scala 200:24]
    cnt_complt <= _T_256 @[Ctl.scala 200:14]
    node _T_257 = eq(UInt<3>("h00"), ks_state) @[Conditional.scala 37:30]
    when _T_257 : @[Conditional.scala 40:58]
      cyc_cnt <= UInt<1>("h00") @[Ctl.scala 203:14]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_258 = eq(UInt<3>("h01"), ks_state) @[Conditional.scala 37:30]
      when _T_258 : @[Conditional.scala 39:67]
        node _T_259 = eq(n_ks_state, UInt<3>("h00")) @[Ctl.scala 206:22]
        when _T_259 : @[Ctl.scala 206:33]
          cyc_cnt <= UInt<1>("h00") @[Ctl.scala 207:17]
          skip @[Ctl.scala 206:33]
        else : @[Ctl.scala 208:39]
          node _T_260 = eq(n_ks_state, UInt<3>("h02")) @[Ctl.scala 208:28]
          when _T_260 : @[Ctl.scala 208:39]
            cyc_cnt <= cyc_cnt_shift @[Ctl.scala 209:16]
            skip @[Ctl.scala 208:39]
          else : @[Ctl.scala 210:18]
            cyc_cnt <= UInt<18>("h020000") @[Ctl.scala 211:16]
            skip @[Ctl.scala 210:18]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_261 = eq(UInt<3>("h04"), ks_state) @[Conditional.scala 37:30]
        when _T_261 : @[Conditional.scala 39:67]
          node _T_262 = eq(n_ks_state, UInt<3>("h02")) @[Ctl.scala 215:22]
          when _T_262 : @[Ctl.scala 215:33]
            cyc_cnt <= cyc_cnt_shift @[Ctl.scala 216:17]
            skip @[Ctl.scala 215:33]
          else : @[Ctl.scala 217:43]
            node _T_263 = eq(n_ks_state, UInt<3>("h01")) @[Ctl.scala 217:28]
            when _T_263 : @[Ctl.scala 217:43]
              cyc_cnt <= UInt<18>("h020000") @[Ctl.scala 218:16]
              skip @[Ctl.scala 217:43]
          skip @[Conditional.scala 39:67]
    node _T_264 = eq(cyc_cnt, UInt<1>("h00")) @[Ctl.scala 224:15]
    when _T_264 : @[Ctl.scala 224:22]
      cyc_value <= UInt<1>("h00") @[Ctl.scala 225:15]
      skip @[Ctl.scala 224:22]
    else : @[Ctl.scala 226:14]
      node _T_265 = bits(cyc_cnt, 17, 16) @[OneHot.scala 30:18]
      node _T_266 = bits(cyc_cnt, 15, 0) @[OneHot.scala 31:18]
      node _T_267 = neq(_T_265, UInt<1>("h00")) @[OneHot.scala 32:14]
      node _T_268 = or(_T_265, _T_266) @[OneHot.scala 32:28]
      node _T_269 = bits(_T_268, 15, 8) @[OneHot.scala 30:18]
      node _T_270 = bits(_T_268, 7, 0) @[OneHot.scala 31:18]
      node _T_271 = neq(_T_269, UInt<1>("h00")) @[OneHot.scala 32:14]
      node _T_272 = or(_T_269, _T_270) @[OneHot.scala 32:28]
      node _T_273 = bits(_T_272, 7, 4) @[OneHot.scala 30:18]
      node _T_274 = bits(_T_272, 3, 0) @[OneHot.scala 31:18]
      node _T_275 = neq(_T_273, UInt<1>("h00")) @[OneHot.scala 32:14]
      node _T_276 = or(_T_273, _T_274) @[OneHot.scala 32:28]
      node _T_277 = bits(_T_276, 3, 2) @[OneHot.scala 30:18]
      node _T_278 = bits(_T_276, 1, 0) @[OneHot.scala 31:18]
      node _T_279 = neq(_T_277, UInt<1>("h00")) @[OneHot.scala 32:14]
      node _T_280 = or(_T_277, _T_278) @[OneHot.scala 32:28]
      node _T_281 = bits(_T_280, 1, 1) @[CircuitMath.scala 30:8]
      node _T_282 = cat(_T_279, _T_281) @[Cat.scala 29:58]
      node _T_283 = cat(_T_275, _T_282) @[Cat.scala 29:58]
      node _T_284 = cat(_T_271, _T_283) @[Cat.scala 29:58]
      node _T_285 = cat(_T_267, _T_284) @[Cat.scala 29:58]
      cyc_value <= _T_285 @[Ctl.scala 227:15]
      skip @[Ctl.scala 226:14]
    node _T_286 = eq(io.regfile.wken, UInt<1>("h00")) @[Ctl.scala 236:24]
    node _T_287 = and(valid_change, _T_286) @[Ctl.scala 236:21]
    when _T_287 : @[Ctl.scala 236:31]
      key_vld <= UInt<1>("h01") @[Ctl.scala 237:13]
      skip @[Ctl.scala 236:31]
    else : @[Ctl.scala 238:33]
      node _T_288 = bits(io.hs.key_ack, 0, 0) @[Ctl.scala 238:30]
      when _T_288 : @[Ctl.scala 238:33]
        key_vld <= UInt<1>("h00") @[Ctl.scala 239:12]
        skip @[Ctl.scala 238:33]
    reg key_curinfo : UInt, clock with : (reset => (reset, UInt<1>("h00"))) @[Ctl.scala 241:28]
    when valid_change : @[Ctl.scala 242:21]
      key_curinfo <= key_cur_st @[Ctl.scala 243:16]
      skip @[Ctl.scala 242:21]
    else : @[Ctl.scala 244:31]
      node _T_289 = bits(io.hs.key_ack, 0, 0) @[Ctl.scala 244:28]
      when _T_289 : @[Ctl.scala 244:31]
        key_curinfo <= UInt<1>("h00") @[Ctl.scala 245:16]
        skip @[Ctl.scala 244:31]
    reg int_trig : UInt, clock with : (reset => (reset, UInt<1>("h00"))) @[Ctl.scala 251:25]
    node _T_290 = eq(ks_state, UInt<3>("h03")) @[Ctl.scala 252:16]
    node _T_291 = and(_T_290, valid_change) @[Ctl.scala 252:26]
    when _T_291 : @[Ctl.scala 252:42]
      int_trig <= UInt<1>("h01") @[Ctl.scala 253:14]
      skip @[Ctl.scala 252:42]
    else : @[Ctl.scala 254:59]
      node _T_292 = eq(ks_state, UInt<3>("h00")) @[Ctl.scala 254:22]
      node _T_293 = eq(ks_state, UInt<3>("h01")) @[Ctl.scala 254:44]
      node _T_294 = or(_T_292, _T_293) @[Ctl.scala 254:33]
      when _T_294 : @[Ctl.scala 254:59]
        int_trig <= UInt<1>("h00") @[Ctl.scala 255:14]
        skip @[Ctl.scala 254:59]
    reg ctl_int : UInt, clock with : (reset => (reset, UInt<1>("h00"))) @[Ctl.scala 257:24]
    node _T_295 = eq(ks_state, UInt<3>("h01")) @[Ctl.scala 258:16]
    when _T_295 : @[Ctl.scala 258:31]
      ctl_int <= int_trig @[Ctl.scala 259:13]
      skip @[Ctl.scala 258:31]
    else : @[Ctl.scala 260:14]
      ctl_int <= UInt<1>("h00") @[Ctl.scala 261:13]
      skip @[Ctl.scala 260:14]
    io.hs.key_curinfo <= key_curinfo @[Ctl.scala 267:21]
    io.hs.key_vld <= key_vld @[Ctl.scala 268:17]
    io.regfile.ctl_int <= ctl_int @[Ctl.scala 269:22]
    io.regfile.cyc_value <= cyc_value @[Ctl.scala 270:24]
    io.gpio.ks_oe <= f_ks_oe @[Ctl.scala 271:17]
    io.gpio.ks_out <= f_ks_out @[Ctl.scala 272:18]
    
  module KeyscanTop : 
    output io : {global : {flip pclk : Clock, flip presetn : AsyncReset, flip sclk : Clock, flip sresetn : AsyncReset}, apb : {flip psel : UInt<1>, flip pwrite : UInt<1>, flip penable : UInt<1>, flip paddr : UInt<6>, flip pwdata : UInt<32>, prdata : UInt<32>, irq : UInt<1>}, gpio : {flip ks_in : UInt<8>, ks_out : UInt<18>, ks_oe : UInt<18>}}
    
    inst hssync of Hssync @[KeyscanTop.scala 11:22]
    inst regfile of Regfile @[KeyscanTop.scala 12:75]
    regfile.clock <= io.global.pclk
    regfile.reset <= io.global.presetn
    inst ctl of Ctl @[KeyscanTop.scala 13:72]
    ctl.clock <= io.global.sclk
    ctl.reset <= io.global.sresetn
    io.apb.irq <= regfile.io.apb.irq @[KeyscanTop.scala 15:10]
    io.apb.prdata <= regfile.io.apb.prdata @[KeyscanTop.scala 15:10]
    regfile.io.apb.pwdata <= io.apb.pwdata @[KeyscanTop.scala 15:10]
    regfile.io.apb.paddr <= io.apb.paddr @[KeyscanTop.scala 15:10]
    regfile.io.apb.penable <= io.apb.penable @[KeyscanTop.scala 15:10]
    regfile.io.apb.pwrite <= io.apb.pwrite @[KeyscanTop.scala 15:10]
    regfile.io.apb.psel <= io.apb.psel @[KeyscanTop.scala 15:10]
    hssync.io.global.sresetn <= io.global.sresetn @[KeyscanTop.scala 16:13]
    hssync.io.global.sclk <= io.global.sclk @[KeyscanTop.scala 16:13]
    hssync.io.global.presetn <= io.global.presetn @[KeyscanTop.scala 16:13]
    hssync.io.global.pclk <= io.global.pclk @[KeyscanTop.scala 16:13]
    io.gpio.ks_oe <= ctl.io.gpio.ks_oe @[KeyscanTop.scala 17:11]
    io.gpio.ks_out <= ctl.io.gpio.ks_out @[KeyscanTop.scala 17:11]
    ctl.io.gpio.ks_in <= io.gpio.ks_in @[KeyscanTop.scala 17:11]
    hssync.io.slave.key_ack <= regfile.io.hs.key_ack @[KeyscanTop.scala 18:17]
    regfile.io.hs.key_vld <= hssync.io.slave.key_vld @[KeyscanTop.scala 18:17]
    regfile.io.hs.key_curinfo <= hssync.io.slave.key_curinfo @[KeyscanTop.scala 18:17]
    regfile.io.ctl.ctl_int <= ctl.io.regfile.ctl_int @[KeyscanTop.scala 19:18]
    regfile.io.ctl.cyc_value <= ctl.io.regfile.cyc_value @[KeyscanTop.scala 19:18]
    ctl.io.regfile.sintval_value <= regfile.io.ctl.sintval_value @[KeyscanTop.scala 19:18]
    ctl.io.regfile.rintval_value <= regfile.io.ctl.rintval_value @[KeyscanTop.scala 19:18]
    ctl.io.regfile.deb_value <= regfile.io.ctl.deb_value @[KeyscanTop.scala 19:18]
    ctl.io.regfile.pol <= regfile.io.ctl.pol @[KeyscanTop.scala 19:18]
    ctl.io.regfile.ioen <= regfile.io.ctl.ioen @[KeyscanTop.scala 19:18]
    ctl.io.regfile.key_preinfo <= regfile.io.ctl.key_preinfo @[KeyscanTop.scala 19:18]
    ctl.io.regfile.wken <= regfile.io.ctl.wken @[KeyscanTop.scala 19:18]
    ctl.io.regfile.ksen <= regfile.io.ctl.ksen @[KeyscanTop.scala 19:18]
    ctl.io.hs.key_ack <= hssync.io.master.key_ack @[KeyscanTop.scala 20:13]
    hssync.io.master.key_vld <= ctl.io.hs.key_vld @[KeyscanTop.scala 20:13]
    hssync.io.master.key_curinfo <= ctl.io.hs.key_curinfo @[KeyscanTop.scala 20:13]
    
